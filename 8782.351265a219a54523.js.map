{"version":3,"file":"8782.351265a219a54523.js","mappings":"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","names":["ObjectUnsubscribedError","createErrorClass","_super","this","name","message","Subject","_Observable","_inherits","_createSuper","_this","_classCallCheck","call","closed","currentObservers","observers","isStopped","hasError","thrownError","_createClass","key","value","operator","subject","AnonymousSubject","_this2","errorContext","_throwIfClosed","Array","from","_step","_iterator","_createForOfIteratorHelper","s","n","done","next","err","e","f","_this3","length","shift","error","_this4","complete","get","_a","subscriber","_get","_getPrototypeOf","prototype","_checkFinalizedStatuses","_innerSubscribe","_this5","EMPTY_SUBSCRIPTION","push","Subscription","arrRemove","observable","Observable","source","create","destination","_Subject","_super2","_this6","_b","subscribe","forkJoin","_len","arguments","args","_key","resultSelector","popResultSelector","_argsArgArrayOrObject","argsArgArrayOrObject","sources","keys","result","values","remainingCompletions","remainingEmissions","_loop","sourceIndex","hasValue","innerFrom","createOperatorSubscriber","undefined","createObject","pipe","mapOneOrManyArgs","finalize","callback","operate","add","map","project","thisArg","index","share","options","_options$connector","connector","_options$resetOnError","resetOnError","_options$resetOnCompl","resetOnComplete","_options$resetOnRefCo","resetOnRefCountZero","wrapperSource","connection","resetConnection","refCount","hasCompleted","hasErrored","cancelReset","unsubscribe","reset","resetAndUnsubscribe","conn","dest","handleReset","SafeSubscriber","on","onSubscriber","apply","executeSchedule","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","schedule","isScheduler","isFunction","policy","_c0","trustedHTMLFromString","html","_getPolicy","getPolicy","window","ttWindow","trustedTypes","createPolicy","createHTML","getMatIconNameNotFoundError","iconName","Error","concat","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","resolver","cleanLiteral","sanitize","SecurityContext","trustedLiteral","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","set","classNames","safeUrl","cachedIcon","of","cloneSvg","_loadSvgIconFromConfig","tap","svg","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","catchError","errorMessage","handleError","foundIcon","i","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","_attributes$i","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_options$withCredenti","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","isSafeUrlWithOptions","ɵfac","t","i0","i1","i2","DOCUMENT","ɵprov","token","factory","providedIn","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","Optional","SkipSelf","HttpClient","DomSanitizer","ErrorHandler","useFactory","_MatIconBase","mixinColor","_class","_elementRef","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","inject","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","_MatIconBase2","elementRef","_iconRegistry","ariaHidden","defaults","_inline","_previousFontSetClass","_currentIconFetch","color","defaultColor","fontSet","nativeElement","inline","coerceBooleanProperty","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","_fontIcon","parts","split","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","svgIcon","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","_usingFontIcon","elem","fontSetClasses","classNameForFontAlias","getDefaultFontSetClass","className","forEach","classList","fontIcon","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","_this$_splitIconName","_splitIconName","_this$_splitIconName2","_slicedToArray","getNamedSvgIcon","take","_setSvgElement","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","inputs","exportAs","features","ngContentSelectors","decls","vars","template","styles","encapsulation","changeDetection","MatIconModule","ɵmod","ɵinj","imports","MatCommonModule","_arrayWithHoles","arr","isArray","_nonIterableRest","TypeError","arrayWithHoles","Z","_iterableToArrayLimit","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","Object","return","unsupportedIterableToArray","nonIterableRest"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","./node_modules/rxjs/dist/esm/internal/operators/finalize.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","./node_modules/rxjs/dist/esm/internal/util/isScheduler.js","./node_modules/@angular/material/fesm2022/icon.mjs","./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"],"sourcesContent":["import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n    return operate((source, subscriber) => {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return on(...args).subscribe(onSubscriber);\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n    const scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}