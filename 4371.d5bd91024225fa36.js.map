{"version":3,"file":"4371.d5bd91024225fa36.js","mappings":"4cACaA,cAA0BC,GAAiB,SAACC,GAAM,OAAK,WAChEA,EAAOC,MACPA,KAAKC,KAAO,0BACZD,KAAKE,QAAU,qBACnB,CAAC,yBCAYC,EAAO,eAAPA,EAAO,SAAAC,IAAAC,OAAAF,EAAAC,GAAA,IAAAL,KAAAO,KAAAH,GAChB,SAAAA,IAAc,IAAAI,EAAAC,cAAAR,KAAAG,IACVI,EAAAR,EAAAU,KAAAT,OACKU,QAAS,EACdH,EAAKI,iBAAmB,KACxBJ,EAAKK,UAAY,GACjBL,EAAKM,WAAY,EACjBN,EAAKO,UAAW,EAChBP,EAAKQ,YAAc,KAAKR,CAC5B,CAACS,cAAAb,EAAA,EAAAc,IAAA,OAAAC,MACD,SAAKC,GACD,IAAMC,EAAU,IAAIC,EAAiBrB,KAAMA,MAC3CoB,SAAQD,SAAWA,EACZC,CACX,GAAC,CAAAH,IAAA,iBAAAC,MACD,WACI,GAAIlB,KAAKU,OACL,MAAM,IAAIb,CAElB,GAAC,CAAAoB,IAAA,OAAAC,MACD,SAAKA,GAAO,IAAAI,EAAAtB,MACRuB,OAAa,WAET,GADAD,EAAKE,kBACAF,EAAKT,UAAW,CACZS,EAAKX,mBACNW,EAAKX,iBAAmBc,MAAMC,KAAKJ,EAAKV,YAC3C,IAC2Ce,EAD3CC,KAAAC,KACsBP,EAAKX,kBAAgB,IAA5C,IAAAiB,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAmBL,EAAAT,MACNe,KAAKf,EACjB,OAAAgB,GAAAN,EAAAO,EAAAD,EAAA,SAAAN,EAAAQ,GAAA,EAET,EACJ,GAAC,CAAAnB,IAAA,QAAAC,MACD,SAAMgB,GAAK,IAAAG,EAAArC,MACPuB,OAAa,WAET,GADAc,EAAKb,kBACAa,EAAKxB,UAAW,CACjBwB,EAAKvB,SAAWuB,EAAKxB,WAAY,EACjCwB,EAAKtB,YAAcmB,EAEnB,QADQtB,EAAcyB,EAAdzB,UACDA,EAAU0B,QACb1B,EAAU2B,QAAQC,MAAMN,EAAG,CAGvC,EACJ,GAAC,CAAAjB,IAAA,WAAAC,MACD,WAAW,IAAAuB,EAAAzC,MACPuB,OAAa,WAET,GADAkB,EAAKjB,kBACAiB,EAAK5B,UAAW,CACjB4B,EAAK5B,WAAY,EAEjB,QADQD,EAAc6B,EAAd7B,UACDA,EAAU0B,QACb1B,EAAU2B,QAAQG,UAAQ,CAGtC,EACJ,GAAC,CAAAzB,IAAA,cAAAC,MACD,WACIlB,KAAKa,UAAYb,KAAKU,QAAS,EAC/BV,KAAKY,UAAYZ,KAAKW,iBAAmB,IAC7C,GAAC,CAAAM,IAAA,WAAA0B,IACD,WACI,IAAIC,EACJ,OAAkC,QAAzBA,EAAK5C,KAAKY,iBAA8B,IAAPgC,OAAgB,EAASA,EAAGN,QAAU,CACpF,GAAC,CAAArB,IAAA,gBAAAC,MACD,SAAc2B,GACV,OAAA7C,KAAKwB,kBAAc,EACnBsB,QAAAC,KAAA5C,EAAA6C,WAAA,gBAAAhD,MAAAS,KAAAT,KAA2B6C,EAC/B,GAAC,CAAA5B,IAAA,aAAAC,MACD,SAAW2B,GACP,OAAA7C,KAAKwB,iBACLxB,KAAKiD,wBAAwBJ,GACtB7C,KAAKkD,gBAAgBL,EAChC,GAAC,CAAA5B,IAAA,kBAAAC,MACD,SAAgB2B,GAAY,IAAAM,EAAAnD,KACKY,EAAcZ,KAAdY,UAC7B,OAD2CZ,KAAnCc,UAAmCd,KAAzBa,UAEPuC,MAEXpD,KAAKW,iBAAmB,KACxBC,EAAUyC,KAAKR,GACR,IAAIS,KAAa,WACpBH,EAAKxC,iBAAmB,QACxB4C,KAAU3C,EAAWiC,EACzB,GACJ,GAAC,CAAA5B,IAAA,0BAAAC,MACD,SAAwB2B,GACpB,IAA+BhC,EAAcb,KAAda,UAAcb,KAArCc,SAEJ+B,EAAWL,MAF8BxC,KAA3Be,aAITF,GACLgC,EAAWH,UAEnB,GAAC,CAAAzB,IAAA,eAAAC,MACD,WACI,IAAMsC,EAAa,IAAIC,IACvBD,SAAWE,OAAS1D,KACbwD,CACX,KAACrD,CAAA,CApGe,CAASsD,KAsG7BtD,SAAQwD,OAAS,SAACC,EAAaF,GAC3B,OAAO,IAAIrC,EAAiBuC,EAAaF,EAC7C,EAxGavD,CAAO,IAyGPkB,EAAgB,SAAAwC,IAAAxD,OAAAgB,EAAAwC,GAAA,IAAAC,KAAAxD,KAAAe,GACzB,SAAAA,EAAYuC,EAAaF,GAAQ,IAAAK,EAAAvD,cAAAR,KAAAqB,IAC7B0C,EAAAD,EAAArD,KAAAT,OACK4D,YAAcA,EACnBG,EAAKL,OAASA,EAAOK,CACzB,CAAC/C,cAAAK,EAAA,EAAAJ,IAAA,OAAAC,MACD,SAAKA,GACD,IAAI0B,EAAIoB,EACwE,QAA/EA,EAAiC,QAA3BpB,EAAK5C,KAAK4D,mBAAgC,IAAPhB,OAAgB,EAASA,EAAGX,YAAyB,IAAP+B,GAAyBA,EAAGvD,KAAKmC,EAAI1B,EACjI,GAAC,CAAAD,IAAA,QAAAC,MACD,SAAMgB,GACF,IAAIU,EAAIoB,EACyE,QAAhFA,EAAiC,QAA3BpB,EAAK5C,KAAK4D,mBAAgC,IAAPhB,OAAgB,EAASA,EAAGJ,aAA0B,IAAPwB,GAAyBA,EAAGvD,KAAKmC,EAAIV,EAClI,GAAC,CAAAjB,IAAA,WAAAC,MACD,WACI,IAAI0B,EAAIoB,EAC4E,QAAnFA,EAAiC,QAA3BpB,EAAK5C,KAAK4D,mBAAgC,IAAPhB,OAAgB,EAASA,EAAGF,gBAA6B,IAAPsB,GAAyBA,EAAGvD,KAAKmC,EACjI,GAAC,CAAA3B,IAAA,aAAAC,MACD,SAAW2B,GACP,IAAID,EAAIoB,EACR,OAAmG,QAA3FA,EAA4B,QAAtBpB,EAAK5C,KAAK0D,cAA2B,IAAPd,OAAgB,EAASA,EAAGqB,UAAUpB,UAAgC,IAAPmB,EAAgBA,EAAKZ,IACpI,KAAC/B,CAAA,CArBwB,CAASlB,yEC3G/B,SAAS+D,IAAgB,QAAAC,EAAAC,UAAA9B,OAAN+B,EAAI,IAAA5C,MAAA0C,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJD,EAAIC,GAAAF,UAAAE,GAC1B,OCHG,SAASC,IACZ,SAAOC,KAAS,EACpB,CDCWD,IAAS,EAAG7C,KAAK2C,KAAMI,MAAaJ,IAC/C,wCEJaK,EAAQ,aAAIjB,GAAW,SAACZ,GAAU,OAAKA,EAAWH,UAAU,yECAlE,SAASiC,EAAYC,GAAsB,IAAXC,EAAKT,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,GAAAA,UAAA,GAAG,EAC3C,SAAOW,KAAQ,SAACrB,EAAQb,GACpBA,EAAWmC,IAAIJ,EAAUK,SAAS,kBAAMvB,EAAOO,UAAUpB,EAAW,EAAEgC,GAC1E,EACJ,gDCHO,SAASK,EAAsBC,EAAOP,GACzC,IAAKO,EACD,MAAM,IAAIC,MAAM,2BAEpB,OAAO,IAAI3B,IAAW,SAACZ,IACnBwC,OAAgBxC,EAAY+B,EAAW,WACnC,IAAMU,EAAWH,EAAMI,OAAOC,kBAC9BH,OAAgBxC,EAAY+B,EAAW,WACnCU,EAASrD,OAAOwD,KAAK,SAACC,GACdA,EAAO1D,KACPa,EAAWH,WAGXG,EAAWZ,KAAKyD,EAAOxE,MAE/B,EACJ,EAAG,GAAG,EACV,EACJ,EACJ,kFCnBO,SAASQ,EAAKyD,EAAOP,GACxB,OAAOA,ECUJ,SAASe,EAAUR,EAAOP,GAC7B,GAAa,MAATO,EAAe,CACf,MAAIS,KAAoBT,GACpB,OCbL,SAASU,EAAmBV,EAAOP,GACtC,SAAOkB,MAAUX,GAAOY,KAAKpB,EAAYC,IAAS,EAAGoB,KAAUpB,GACnE,CDWmBiB,CAAmBV,EAAOP,GAErC,MAAIqB,KAAYd,GACZ,OElBL,SAASe,EAAcf,EAAOP,GACjC,OAAO,IAAInB,IAAW,SAACZ,GACnB,IAAIsD,EAAI,EACR,OAAOvB,EAAUK,SAAS,WAClBkB,IAAMhB,EAAM7C,OACZO,EAAWH,YAGXG,EAAWZ,KAAKkD,EAAMgB,MACjBtD,EAAWnC,QACZV,KAAKiF,WAGjB,EACJ,EACJ,CFGmBiB,CAAcf,EAAOP,GAEhC,MAAIwB,KAAUjB,GACV,OGnBL,SAASkB,EAAgBlB,EAAOP,GACnC,SAAOkB,MAAUX,GAAOY,KAAKpB,EAAYC,IAAS,EAAGoB,KAAUpB,GACnE,CHiBmByB,CAAgBlB,EAAOP,GAElC,MAAI0B,KAAgBnB,GAChB,OAAOD,EAAsBC,EAAOP,GAExC,MAAI2B,KAAWpB,GACX,OIxBL,SAASqB,EAAiBrB,EAAOP,GACpC,OAAO,IAAInB,IAAW,SAACZ,GACnB,IAAIyC,EACJD,cAAgBxC,EAAY+B,EAAW,WACnCU,EAAWH,EAAMsB,QAAgB,EACjCpB,KAAgBxC,EAAY+B,EAAW,WACnC,IAAI1D,EACAc,EACJ,IAAI,IAAA0E,EACmBpB,EAASrD,OAAzBf,EAAKwF,EAALxF,MAAOc,EAAI0E,EAAJ1E,IACd,OACOE,GAEH,YADAW,EAAWL,MAAMN,EAErB,CACIF,EACAa,EAAWH,WAGXG,EAAWZ,KAAKf,EAExB,EAAG,GAAG,EACV,GACO,oBAAMyF,KAA+DrB,GAAQsB,SAAYtB,EAAQsB,QAAS,CACrH,EACJ,CJDmBJ,CAAiBrB,EAAOP,GAEnC,MAAIiC,KAAqB1B,GACrB,OK7BL,SAAS2B,EAA2B3B,EAAOP,GAC9C,OAAOM,KAAsB6B,KAAmC5B,GAAQP,EAC5E,CL2BmBkC,CAA2B3B,EAAOP,EAAS,CAG1D,QAAMoC,KAAiC7B,EAC3C,CDhCuBQ,CAAUR,EAAOP,IAAS,EAAIkB,MAAUX,EAC/D,8FOCO,SAAS8B,IAAe,QAAA9C,EAAAC,UAAA9B,OAAN+B,EAAI,IAAA5C,MAAA0C,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJD,EAAIC,GAAAF,UAAAE,GACzB,IAAMM,KAAYH,MAAaJ,GACzB6C,KAAaC,MAAU9C,EAAM+C,KAC7BC,EAAUhD,EAChB,OAAQgD,EAAQ/E,OAGS,IAAnB+E,EAAQ/E,QAAW,EAEbwD,MAAUuB,EAAQ,KAAE,EAEpB7C,KAAS0C,EAFW,EAED,EAAExF,KAAK2F,EAASzC,IALvCF,GAMZ,4HChBO,SAAS4C,EAAyB1D,EAAa2D,EAAQC,EAAYC,EAASC,GAC/E,OAAO,IAAIC,EAAmB/D,EAAa2D,EAAQC,EAAYC,EAASC,EAC5E,CACO,IAAMC,EAAkB,SAAAC,IAAAvH,OAAAsH,EAAAC,GAAA,IAAA7H,KAAAO,KAAAqH,GAC3B,SAAAA,EAAY/D,EAAa2D,EAAQC,EAAYC,EAASC,EAAYG,GAAmB,IAAAC,EAAAC,EAAAC,EAAAzH,EAAAC,cAAAR,KAAA2H,IACjFpH,EAAAR,EAAAU,KAAAT,KAAM4D,IACD8D,WAAaA,EAClBnH,EAAKsH,kBAAoBA,EACzBtH,EAAK0H,MAAQV,EACP,SAAUrG,GACR,IACIqG,EAAOrG,EACX,OACOgB,GACH0B,EAAYpB,MAAMN,EACtB,CACJ,KAACY,MAAAgF,KAAAI,KAAA3H,IAAA,EAAAwC,KAAA4E,EAAA3E,YAAA,QAAA8E,GAELvH,EAAK4H,OAASV,EACR,SAAUvF,GACR,IACIuF,EAAQvF,EACZ,OACOA,GACH0B,EAAYpB,MAAMN,EACtB,SAEIlC,KAAKoI,aACT,CACJ,KAACtF,MAAAiF,KAAAG,KAAA3H,IAAA,EAAAwC,KAAA4E,EAAA3E,YAAA,SAAA+E,GAELxH,EAAK8H,UAAYb,EACX,WACE,IACIA,GACJ,OACOtF,GACH0B,EAAYpB,MAAMN,EACtB,SAEIlC,KAAKoI,aACT,CACJ,KAACtF,MAAAkF,KAAAE,KAAA3H,IAAA,EAAAwC,KAAA4E,EAAA3E,YAAA,YAAAgF,GACiBzH,CAC1B,CAACS,cAAA2G,EAAA,EAAA1G,IAAA,cAAAC,MACD,WACI,IAAI0B,EACJ,IAAK5C,KAAK6H,mBAAqB7H,KAAK6H,oBAAqB,CACrD,IAAQnH,EAAWV,KAAXU,QACRoC,UAAAC,KAAA4E,EAAA3E,WAAA,cAAAhD,MAAAS,KAAAT,OACCU,IAAsC,QAA1BkC,EAAK5C,KAAK0H,kBAA+B,IAAP9E,GAAyBA,EAAGnC,KAAKT,MAAI,CAE5F,KAAC2H,CAAA,CAjD0B,SAASW,gECFjC,SAASC,EAAIC,EAASC,GACzB,SAAO1D,KAAQ,SAACrB,EAAQb,GACpB,IAAI6F,EAAQ,EACZhF,EAAOO,aAAUqD,KAAyBzE,EAAY,SAAC3B,GACnD2B,EAAWZ,KAAKuG,EAAQ/H,KAAKgI,EAASvH,EAAOwH,KACjD,GACJ,EACJ,6DCPO,SAASlE,IACZ,SAAOmE,KAASC,IADexE,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,GAAAA,UAAA,GAAGgD,IAEtC,yGCCO,SAASuB,EAASH,EAASK,GAAuC,IAAvB3B,EAAU9C,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,GAAAA,UAAA,GAAGgD,IAC3D,SAAIT,KAAWkC,GACJF,EAAS,SAACG,EAAG3C,GAAC,SAAKoC,KAAI,SAACQ,EAAGC,GAAE,OAAKH,EAAeC,EAAGC,EAAG5C,EAAG6C,EAAG,EAA/C,EAA+C,EAAElD,MAAU0C,EAAQM,EAAG3C,IAAI,EAAEe,IAElE,iBAAnB2B,IACZ3B,EAAa2B,MAEV9D,KAAQ,SAACrB,EAAQb,GAAU,OCT/B,SAASoG,EAAevF,EAAQb,EAAY2F,EAAStB,EAAYgC,EAAcC,EAAQC,EAAmBC,GAC7G,IAAMC,EAAS,GACXC,EAAS,EACTb,EAAQ,EACRc,GAAa,EACXC,EAAgB,WACdD,IAAeF,EAAOhH,SAAWiH,GACjC1G,EAAWH,UAEnB,EACMgH,EAAY,SAACxI,GAAK,OAAMqI,EAASrC,EAAayC,EAAWzI,GAASoI,EAAOjG,KAAKnC,EAAM,EACpFyI,EAAa,SAAbA,EAAczI,GAChBiI,GAAUtG,EAAWZ,KAAKf,GAC1BqI,IACA,IAAIK,GAAgB,GACpB9D,QAAU0C,EAAQtH,EAAOwH,MAAUzE,aAAUqD,KAAyBzE,EAAY,SAACgH,GACnBX,IAAaW,GACrEV,EACAO,EAAUG,GAGVhH,EAAWZ,KAAK4H,EAExB,EAAG,WACCD,GAAgB,CACpB,OAAG9E,EAAW,WACV,GAAI8E,EACA,IACIL,IACA,QADSO,EAAA,WAEL,IAAMC,EAAgBT,EAAO/G,QACzB6G,KACA/D,KAAgBxC,EAAYuG,EAAmB,kBAAMO,EAAWI,EAAc,GAG9EJ,EAAWI,EAEnB,EAROT,EAAOhH,QAAUiH,EAASrC,GAAU4C,IAS3CL,GACJ,OACOvH,GACHW,EAAWL,MAAMN,EACrB,CAER,GACJ,EACAwB,SAAOO,aAAUqD,KAAyBzE,EAAY6G,EAAW,WAC7DF,GAAa,EACbC,GACJ,IACO,WACuEJ,KAC9E,CACJ,CD5C2CJ,CAAevF,EAAQb,EAAY2F,EAAStB,EAAW,GAClG,uEEVO,SAASlB,EAAUpB,GAAsB,IAAXC,EAAKT,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,GAAAA,UAAA,GAAG,EACzC,SAAOW,KAAQ,SAACrB,EAAQb,GACpBa,EAAOO,aAAUqD,KAAyBzE,EAAY,SAAC3B,GAAK,SAAKmE,KAAgBxC,EAAY+B,EAAW,kBAAM/B,EAAWZ,KAAKf,EAAM,EAAE2D,EAAM,EAAE,oBAAMQ,KAAgBxC,EAAY+B,EAAW,kBAAM/B,EAAWH,UAAU,EAAEmC,EAAM,EAAE,SAAC3C,GAAG,SAAKmD,KAAgBxC,EAAY+B,EAAW,kBAAM/B,EAAWL,MAAMN,EAAI,EAAE2C,EAAM,GACvT,EACJ,yECJO,SAASmF,IAAqB,QAAA7F,EAAAC,UAAA9B,OAAR2H,EAAM,IAAAxI,MAAA0C,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAN2F,EAAM3F,GAAAF,UAAAE,GAC/B,IAAMM,KAAYH,MAAawF,GAC/B,SAAOlF,KAAQ,SAACrB,EAAQb,IACnB+B,KAAYV,KAAO+F,EAAQvG,EAAQkB,IAAS,EAAIV,KAAO+F,EAAQvG,IAASO,UAAUpB,EACvF,EACJ,yECLO,SAASqH,EAAKC,GACjB,OAAOA,GAAS,EAER,kBAAMzF,GAAK,KACbK,KAAQ,SAACrB,EAAQb,GACf,IAAIuH,EAAO,EACX1G,EAAOO,aAAUqD,KAAyBzE,EAAY,SAAC3B,KAC7CkJ,GAAQD,IACVtH,EAAWZ,KAAKf,GACZiJ,GAASC,GACTvH,EAAWH,WAGvB,GACJ,EACR,oFCdO,SAAS2H,EAAUC,GACtB,SAAOvF,KAAQ,SAACrB,EAAQb,IACpBiD,QAAUwE,GAAUrG,aAAUqD,KAAyBzE,EAAY,kBAAMA,EAAWH,UAAU,EAAE6H,OAC/F1H,EAAWnC,QAAUgD,EAAOO,UAAUpB,EAC3C,EACJ,iFCPA,SAAS2H,EAAKC,GACV,OAAOA,EAAIA,EAAInI,OAAS,EAC5B,CACO,SAASoI,EAAkBrG,GAC9B,SAAOsC,KAAW6D,EAAKnG,IAASA,EAAKsG,WAAQ7F,CACjD,CACO,SAASL,EAAaJ,GACzB,SAAOuG,KAAYJ,EAAKnG,IAASA,EAAKsG,WAAQ7F,CAClD,CACO,SAASqC,EAAU9C,EAAMwG,GAC5B,MAA6B,iBAAfL,EAAKnG,GAAqBA,EAAKsG,MAAQE,CACzD,kBCbO,SAASxF,EAAgByF,EAAoBlG,EAAWmG,GAAiC,IAA3BlG,EAAKT,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,GAAAA,UAAA,GAAG,EAAG4G,EAAM5G,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,IAAAA,UAAA,GAC5E6G,EAAuBrG,EAAUK,SAAS,WAC5C8F,IACIC,EACAF,EAAmB9F,IAAIhF,KAAKiF,SAAS,KAAMJ,IAG3C7E,KAAKoI,aAEb,EAAGvD,GAEH,GADAiG,EAAmB9F,IAAIiG,IAClBD,EACD,OAAOC,CAEf,mECbO,SAASL,EAAY1J,GACxB,OAAOA,MAASyF,KAAWzF,EAAM+D,SACrC,2DCFO,SAASiG,EAAQxH,GACpB,SAAOiD,KAA2DjD,GAAOyH,KAC7E,CACO,SAASpG,EAAQqG,GACpB,OAAO,SAAC1H,GACJ,GAAIwH,EAAQxH,GACR,OAAOA,EAAOyH,KAAK,SAAUE,GACzB,IACI,OAAOD,EAAKC,EAAcrL,KAC9B,OACOkC,GACHlC,KAAKwC,MAAMN,EACf,CACJ,GAEJ,MAAM,IAAIoJ,UAAU,yCACxB,CACJ,2pBCAAC,EAAA,MAKMC,GAA4BxK,OAC9B,SAAAwK,EAEA9H,EAEA+H,GAEqB,IAArBC,EAAWtH,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,IAAAA,UAAA,IAAQ5D,OAAAR,KAAAwL,GACfxL,KAAK0D,OAASA,EACd1D,KAAKyL,SAAWA,EAChBzL,KAAK0L,YAAcA,CACvB,GASEC,EAAyB,IAAIC,iBAAe,iBAQ5CC,EAAyB,IAAID,iBAAe,iBAQ5CE,EAAgC,IAAIF,iBAAe,uBAQnDG,GAAoBC,oBAAcC,iBAAWC,yBALlClL,OACb,SAAAmL,EAAYC,IAAa5L,OAAAR,KAAAmM,GACrBnM,KAAKoM,YAAcA,CACvB,IAEgF,YAAY,GAO1FC,EAAmB,eAAnBA,GAAmBrL,OAAA,SAAAqL,KAAA7L,OAAAR,KAAAqM,EAAA,GAAnBA,SACYC,UAAI,SAAAC,GAAA,WAAAA,GAAwFF,EAAmB,EAD3HA,EAEYG,UADkFC,8BAAE,CAAAC,KACJL,EAAmBM,UAAA,8CAAAC,UAAA,sBAAAC,SAAA,CADjBJ,+BACyH,CAAC,CAAEK,QAASjB,EAAwBkB,YAAaV,QAFxQA,CAAmB,IAkBnBW,EAAyB,eAAzBA,GAAyBhM,OAAA,SAAAgM,KAAAxM,OAAAR,KAAAgN,EAAA,GAAzBA,SACYV,UAAI,SAAAC,GAAA,WAAAA,GAAwFS,EAAyB,EADjIA,EAEYR,UAnBkFC,8BAAE,CAAAC,KAmBJM,EAAyBL,UAAA,2DAAAC,UAAA,6BAAAC,SAAA,CAnBvBJ,+BAmBmJ,CAAC,CAAEK,QAAShB,EAA+BiB,YAAaC,QAFzSA,CAAyB,IAiBzBC,EAAa,eAAbA,EAAa,SAAAC,IAAA7M,OAAA4M,EAAAC,GAAA,IAAAnN,KAAAO,KAAA2M,GAiEf,SAAAA,EAAYE,EAAYC,EAASC,EAAUC,EAAqBC,EAAoBC,EAAWC,EAAeC,GAAU,IAAAnN,EAAAC,cAAAR,KAAAiN,IACpH1M,EAAAR,EAAAU,KAAAT,KAAMmN,IACDC,QAAUA,EACf7M,EAAKgN,mBAAqBA,EAE1BhN,EAAKoN,WAAY,EAEjBpN,EAAKqN,oBAAqB,EAE1BrN,EAAKsN,mBAAoB,EAEzBtN,EAAKuN,mBAAoB,EAEzBvN,EAAKwN,KAAO,SACZxN,EAAKyN,WAAY,EACjBzN,EAAK0N,aAAc,EACnB1N,EAAK2N,WAAY,EACjB3N,EAAK4N,YAAa,EAElB5N,EAAK6N,SAAW,IAAIjO,IAEpBI,EAAK8N,QAAU,IAAIlO,IAEnBI,EAAK+N,gBAAkB,IAAIC,eAE3BhO,EAAKiO,UAAY,IAAID,eAErBhO,EAAKkO,QAAU,IAAIF,eACnBhO,EAAKmO,oBAILnO,EAAKoO,kBAAoBnB,EAAUoB,cAAc,OACjDrO,EAAKoO,kBAAkBE,UAAU7J,IAAI,mBACrCzE,EAAK6L,YAAY0C,cAAcC,YAAYxO,EAAKoO,mBAChDpO,EAAKyO,YAAc,IAAIC,oBAAc/G,KAAA3H,GAAO6M,EAAS7M,EAAKoO,kBAAmBtB,GAC7E9M,EAAKyO,YAAYE,mBAAmB/B,GACpC5M,EAAK4O,aAAe7B,GAAuB,CAAC,EAC5C/M,EAAK6O,oBAAwC,mBAAlB3B,EAC3BlN,EAAKmN,SAAuB,MAAZA,GAAmB2B,SAAS3B,KAAa,EAAQnN,CACrE,CAACS,cAAAiM,EAAA,EAAAhM,IAAA,iBAAA0B,eAnGG,OAAQ3C,KAAKsP,UACTtP,KAAKuP,eACLvP,KAAKoP,uBACHpP,KAAKmP,aAAaG,QAC5B,GACA,CAAArO,IAAA,WAAA0B,IACA,WACI,OAAO3C,KAAKgO,SAChB,EAACwB,IACD,SAAatO,GACT,IAAMuO,KAAeC,yBAAsBxO,GACvCuO,IAAiBzP,KAAKgO,YACtBhO,KAAKgO,UAAYyB,EACjBzP,KAAK2P,2BAEb,GACA,CAAA1O,IAAA,QAAA0B,IACA,WACI,YAAuBmC,IAAhB9E,KAAK4P,OAAuB5P,KAAK4P,OAAS5P,KAAKoM,YAAY0C,cAAce,WACpF,EAACL,IACD,SAAUtO,GACNlB,KAAK4P,OAAS1O,CAClB,GACA,CAAAD,IAAA,aAAA0B,IAMA,WACI,OAAO3C,KAAKiO,aAAejO,KAAK4N,kBACpC,EAAC4B,IACD,SAAetO,GACXlB,KAAKiO,eAAcyB,yBAAsBxO,EAC7C,GACA,CAAAD,IAAA,WAAA0B,IACA,WACI,OAAO3C,KAAK8N,mBAAqB9N,KAAKkO,SAC1C,EAACsB,IACD,SAAatO,GACTlB,KAAKkO,aAAYwB,yBAAsBxO,EAC3C,GACA,CAAAD,IAAA,YAAA0B,IAGA,WACI,OAAO3C,KAAKmO,UAChB,EAACqB,IACD,SAActO,GACVlB,KAAKmO,cAAauB,yBAAsBxO,EAC5C,GACA,CAAAD,IAAA,eAAA0B,IACA,WAGI,OAAO3C,KAAK8P,aAAe9P,KAAK6N,mBAAqB7N,KAAKyL,UACpDzL,KAAKyL,SAASsE,WACd,IACV,GAAC,CAAA9O,IAAA,oBAAAC,MA0CD,WACI,IAAM8O,EAAoB,iBACpBC,EAAUjQ,KAAKoM,YAAY0C,cAC7BmB,EAAQC,aAAaF,IACrBC,EAAQE,QAAQC,gBAAkBJ,EAClCC,EAAQpB,UAAU7J,IAAIgL,GAItBC,EAAQpB,UAAU7J,IAAI,oBAE9B,GAAC,CAAA/D,IAAA,cAAAC,MACD,WACIlB,KAAKwO,UAAU6B,KAAK,CAAEC,KAAMtQ,OAC5BA,KAAKgP,YAAYuB,sBACrB,GACA,CAAAtP,IAAA,SAAAC,MACA,WACSlB,KAAKgO,YACNhO,KAAKgO,WAAY,EACjBhO,KAAK2P,2BACL3P,KAAKuN,mBAAmBiD,eAEhC,GACA,CAAAvP,IAAA,WAAAC,MACA,WACQlB,KAAKgO,YACLhO,KAAKgO,WAAY,EACjBhO,KAAK2P,2BACL3P,KAAKuN,mBAAmBiD,eAEhC,GACA,CAAAvP,IAAA,uBAAAC,MACA,WACSlB,KAAKgO,YACNhO,KAAKgO,WAAY,EACjBhO,KAAK2P,0BAAyB,GAC9B3P,KAAKuN,mBAAmBiD,eAEhC,GACA,CAAAvP,IAAA,iBAAAC,MACA,WAAoC,IAArBwK,EAAWtH,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,IAAAA,UAAA,GACtB,OAAApE,KAAKgO,WAAahO,KAAKyL,SACvBzL,KAAK2P,yBAAyBjE,GAC9B1L,KAAKuN,mBAAmBiD,eACjBxQ,KAAKyL,QAChB,GACA,CAAAxK,IAAA,QAAAC,MACA,WACSlB,KAAK2N,YACN3N,KAAKoM,YAAY0C,cAAc2B,QAC/BzQ,KAAKoO,SAASnM,KAAK,CAAEqO,KAAMtQ,QAE/BA,KAAK2N,WAAY,CACrB,GACA,CAAA1M,IAAA,SAAAC,MAMA,WACQlB,KAAK0Q,WACL1Q,KAAKyO,QAAQ4B,KAAK,CAAEC,KAAMtQ,MAElC,GACA,CAAAiB,IAAA,eAAAC,MACA,SAAayP,GACL3Q,KAAKsP,UACLqB,EAAMC,gBAEd,GACA,CAAA3P,IAAA,iBAAAC,MACA,SAAeyP,GACX,IAAI3Q,KAAKsP,SAGT,OAAQqB,EAAME,SACV,KAAKC,SACL,KAAKC,YAED/Q,KAAKgR,SAELL,EAAMC,iBACN,MACJ,KAAKK,QAEGjR,KAAK8P,YACL9P,KAAKkR,gBAAe,GAGxBP,EAAMC,iBAGlB,GAAC,CAAA3P,IAAA,QAAAC,MACD,WAAQ,IAAAI,EAAAtB,KAKJA,KAAKoN,QAAQ+D,SAASpL,QAAKmE,KAAK,IAAIjG,UAAU,WAC1C3C,EAAK8L,QAAQgE,IAAI,WACb9P,EAAKqM,WAAY,EACjBrM,EAAK+M,QAAQpM,KAAK,CAAEqO,KAAMhP,GAC9B,EACJ,EACJ,GAAC,CAAAL,IAAA,2BAAAC,MACD,WACIlB,KAAKsO,gBAAgB+B,KAAK,CACtB3M,OAAQ1D,KACR0L,YAH4BtH,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,IAAAA,UAAA,GAI5BqH,SAAUzL,KAAKgO,WAEvB,KAACf,CAAA,CA3Nc,CAASlB,GAAtBkB,SA4NYX,UAAI,SAAAC,GAAA,WAAAA,GAAwFU,GA9PVR,8BA8PyCA,cA9PzCA,8BA8PmEA,UA9PnEA,8BA8PyF4E,YA9PzF5E,8BA8PiH6E,4BAAyB,GA9P1I7E,8BA8PuKA,qBA9PvKA,8BA8PwM8E,YA9PxM9E,8BA8P6N+E,wBAAqB,GA9PlP/E,8BA8P+Q,YAAU,EA5NvXQ,EA6NYT,UA/PkFC,8BAAE,CAAAC,KA+PJO,EAAaN,UAAA,8EAAA8E,eAAA,SAAAC,EAAAC,EAAAC,GAAqwC,IAAAC,EAArwC,EAAAH,IA/PXjF,2BAAEmF,EA+PyiC/F,EAAsB,GA/PjkCY,2BAAEmF,EA+P8oC9F,EAA6B,GA/P7qCW,2BAAEmF,EA+PwvCjG,EAAsB,MAAA+F,IA/PhxCjF,2BAAEoF,EAAFpF,6BAAEkF,EAAAG,OAAAD,EAAAE,OAAFtF,2BAAEoF,EAAFpF,6BAAEkF,EAAAK,aAAAH,EAAAE,OAAFtF,2BAAEoF,EAAFpF,6BAAEkF,EAAAM,WAAAJ,EAAAE,OAAA,EAAAnF,UAAA,qCAAAsF,SAAA,GAAAC,aAAA,SAAAT,EAAAC,GAAA,EAAAD,GAAFjF,uBAAE,iBAAA2F,GAAA,OA+PJT,EAAAU,aAAAD,EAAoB,EA/PlB3F,CA+PkB,mBAAA2F,GAAA,OAApBT,EAAAW,eAAAF,EAAsB,EA/PpB3F,CA+PoB,0BAAtBkF,EAAAlB,OAAO,EA/PLhE,CA+PK,yBAAPkF,EAAAY,OAAO,KAAAb,IA/PLjF,wBAAE,WAAAkF,EAAArC,SAAA,KAAAqC,EAAAjE,SAAFjB,CAAE,OAAAkF,EAAA5D,KAAFtB,CAAE,WAAAkF,EAAArC,UAAA,KAAF7C,CAAE,gBAAAkF,EAAArC,SAAAS,WAAFtD,CAAE,gBAAAkF,EAAAa,cAAF/F,wBAAE,oBAAAkF,EAAAlG,SAAFgB,CAAE,uBAAAkF,EAAAG,OAAFrF,CAAE,8BAAAkF,EAAAK,cAAAL,EAAAM,WAAFxF,CAAE,oBAAAkF,EAAArC,SAAF7C,CAAE,0BAAAkF,EAAAvC,qBAAA,EAAAqD,OAAA,CAAAC,MAAA,QAAAnD,cAAA,gBAAA7B,SAAA,WAAAK,KAAA,OAAAtC,SAAA,WAAAvK,MAAA,QAAA4O,WAAA,aAAAR,SAAA,WAAAoB,UAAA,aAAAiC,QAAA,CAAArE,gBAAA,kBAAAE,UAAA,YAAAC,QAAA,WAAAmE,SAAA,YAAA/F,SAAA,CAAFJ,0CAkC9FQ,CAAa,IAmTb4F,EAAmB,eAAnBA,EAAmB,WACrB,SAAAA,EAAYC,EAAa3F,IAAY3M,OAAAR,KAAA6S,GACjC7S,KAAK8S,YAAcA,EACuB,WAAtC3F,EAAW2B,cAAciE,UACzB5F,EAAW2B,cAAckE,aAAa,OAAQ,SAEtD,CACAhS,cAAA6R,EAAA,EAAA5R,IAAA,eAAAC,MACA,SAAayP,GACT,IAAMsC,EAAajT,KAAK8S,YACpBG,EAAWvC,YAAcuC,EAAW3D,UACpC2D,EAAWjC,SAOfL,EAAMuC,kBACNvC,EAAMC,gBACV,KAACiC,CAAA,CApBoB,GAAnBA,SAqBYvG,UAAI,SAAAC,GAAA,WAAAA,GAAwFsG,GA1WVpG,8BA0W+CQ,GA1W/CR,8BA0WyEA,cAAa,EArBpLoG,EAsBYrG,UA3WkFC,8BAAE,CAAAC,KA2WJmG,EAAmBlG,UAAA,0BAAAC,UAAA,+CAAAuF,aAAA,SAAAT,EAAAC,GAAA,EAAAD,GA3WjBjF,uBAAE,iBAAA2F,GAAA,OA2WJT,EAAAU,aAAAD,EAAoB,IAAAvF,SAAA,CA3WlBJ,+BA2W+K,CAAC,CAAEK,QAASnB,EAAwBoB,YAAa8F,QAtB9TA,CAAmB,IAyCnBM,EAAmC,IAAIvH,iBAAe,6BAItDwH,IAAmBC,qBAAe,WAkBnC,SAAArS,KAjBD,SAAAsS,EAAYC,EAA2BC,EAAaC,EAMpDC,IAAWlT,OAAAR,KAAAsT,GACPtT,KAAKuT,0BAA4BA,EACjCvT,KAAKwT,YAAcA,EACnBxT,KAAKyT,iBAAmBA,EACxBzT,KAAK0T,UAAYA,EAMjB1T,KAAK2T,aAAe,IAAIxT,GAC5B,EAAC,CAlBmC,IAqBpCyT,GAAiB,EAMfC,GAAuB7S,OACzB,SAAA6S,EAEAnQ,EAEAxC,IAAOV,OAAAR,KAAA6T,GACH7T,KAAK0D,OAASA,EACd1D,KAAKkB,MAAQA,CACjB,GAOE4S,EAAiB,eAAjBA,EAAiB,SAAAC,IAAA1T,OAAAyT,EAAAC,GAAA,IAAAjQ,KAAAxD,KAAAwT,GA0InB,SAAAA,EAAY1H,EAAamB,EAAoByG,EAAMR,EAAaC,EAAkBF,EAA2BG,GAAW,IAAArR,EAAA7B,cAAAR,KAAA8T,IACpHzR,EAAAyB,EAAArD,KAAAT,KAAMuT,EAA2BC,EAAaC,EAAkBC,IAC3DtH,YAAcA,EACnB/J,EAAKkL,mBAAqBA,EAC1BlL,EAAK2R,KAAOA,EAKZ3R,EAAK4R,YAAc,gBAMnB5R,EAAK6R,wBAA0B,KAE/B7R,EAAK8R,WAAa,IAAIhU,IAEtBkC,EAAK+R,KAAI,iBAAAlQ,OAAoB0P,MAE7BvR,EAAKgS,UAAY,EAKjBhS,EAAKiS,cAAgB,KAErBjS,EAAKkS,WAAa,WAAQ,EAE1BlS,EAAKmS,UAAY,WAAQ,EACzBnS,EAAKoS,WAAY,EACjBpS,EAAKqS,aAAe,SAACC,EAAIC,IAAE,OAAKD,IAAOC,EAAE,EACzCvS,EAAK6L,WAAY,EAEjB7L,EAAKwS,gBAAkB,aACvBxS,EAAK4L,aAAc,EAEnB5L,EAAKyS,OAAS,IAAIvG,eAMlBlM,EAAK0S,YAAc,IAAIxG,eACnBlM,EAAKqR,YACLrR,EAAKqR,UAAUsB,iBAAa9M,KAAA7F,IAC/BA,CACL,CAACrB,cAAA8S,EAAA,EAAA7S,IAAA,WAAA0B,eAxLc,IAAAsS,EAAAC,EACX,OAAOlV,KAAKmV,UAA+B,QAApBF,EAAAjV,KAAKoV,uBAAe,IAAAH,OAAA,EAApBA,EAAsBxJ,WAAY,GAAyB,QAAvByJ,EAAGlV,KAAKoV,uBAAe,IAAAF,OAAA,EAApBA,EAAsBzJ,SAAS,EACjG,GACA,CAAAxK,IAAA,OAAA0B,IACA,WACI,OAAI3C,KAAKqV,cACErV,KAAKqV,cAETrV,KAAKsV,MAAQ,KAAO,SAC/B,EAAC9F,IACD,SAASzB,GACL/N,KAAKqV,cAAgBtH,CACzB,GACA,CAAA9M,IAAA,WAAA0B,IACA,WACI,OAAO3C,KAAKyU,SAChB,EAACjF,IACD,SAAatO,GACTlB,KAAKyU,aAAY/E,yBAAsBxO,GACvClB,KAAKuV,iBACT,GACA,CAAAtU,IAAA,cAAA0B,IAKA,WACI,OAAO3C,KAAK0U,YAChB,EAAClF,IACD,SAAgBgG,GACZxV,KAAK0U,aAAec,EAChBxV,KAAKoV,iBAELpV,KAAKyV,sBAEb,GACA,CAAAxU,IAAA,QAAA0B,IAIA,WACI,OAAO3C,KAAK4P,MAChB,EAACJ,IACD,SAAUtO,GACNlB,KAAK0V,WAAWxU,GAChBlB,KAAK4P,OAAS1O,CAClB,GACA,CAAAD,IAAA,KAAA0B,IAIA,WACI,OAAO3C,KAAK2V,WAAa3V,KAAK2V,WAAWC,GAAK5V,KAAKoU,IACvD,GACA,CAAAnT,IAAA,WAAA0B,IAIA,WAAe,IAAAkT,EAAAC,EAAAC,EAAAC,EACX,OAAmF,QAAnFH,EAAqB,QAArBC,EAAO9V,KAAKiW,iBAAS,IAAAH,IAAkB,QAAlBC,EAAI/V,KAAK0T,iBAAS,IAAAqC,GAAS,QAATC,EAAdD,EAAgBG,eAAO,IAAAF,OAAT,EAAdA,EAAyBG,aAAaC,8BAAoB,IAAAP,IACvF,EAACrG,IACD,SAAatO,GACTlB,KAAKiW,aAAYvG,yBAAsBxO,GACvClB,KAAK2T,aAAa1R,MACtB,GACA,CAAAhB,IAAA,cAAA0B,IAIA,WACI,OAAO3C,KAAK2V,WAAa3V,KAAK2V,WAAWU,YAAcrW,KAAKsW,YAChE,EAAC9G,IACD,SAAgBtO,GACZlB,KAAKsW,aAAepV,EACpBlB,KAAK2T,aAAa1R,MACtB,GACA,CAAAhB,IAAA,UAAA0B,IACA,WACI,OAAQ3C,KAAK2V,YAAc3V,KAAK2V,WAAWY,SAAYvW,KAAKwW,iBAChE,GACA,CAAAvV,IAAA,QAAA0B,IAIA,WACI,QAAS3C,KAAK2V,YAAc3V,KAAK2V,WAAWL,UAAYtV,KAAKyW,OAA+B,IAAtBzW,KAAKyW,MAAMnU,OACrF,GACA,CAAArB,IAAA,mBAAA0B,IAIA,WACI,OAAQ3C,KAAKsV,OAAStV,KAAKuW,OAC/B,GACA,CAAAtV,IAAA,WAAA0B,IAIA,WACI,OAAO3C,KAAK0T,YAAc1T,KAAK0T,UAAUpE,SAAWtP,KAAKkO,SAC7D,EAACsB,IACD,SAAatO,GACTlB,KAAKkO,aAAYwB,yBAAsBxO,GACvClB,KAAKuV,iBACT,GACA,CAAAtU,IAAA,aAAA0B,IAIA,WACI,OAAO3C,KAAKiO,WAChB,EAACuB,IACD,SAAetO,GACXlB,KAAKiO,eAAcyB,yBAAsBxO,GACzClB,KAAKuV,iBACT,GAAC,CAAAtU,IAAA,WAAAuO,IACD,SAAatO,GACTlB,KAAKsU,cAAgBpT,EACrBlB,KAAKqU,UAAYnT,CACrB,GACA,CAAAD,IAAA,uBAAA0B,IACA,WACI,OAAOsE,eAAK,KAAAyP,KAAI1W,KAAKyW,MAAMlO,IAAI,SAAA+H,GAAI,OAAIA,EAAKhC,eAAe,IAC/D,GACA,CAAArN,IAAA,mBAAA0B,IACA,WACI,OAAOsE,eAAK,KAAAyP,KAAI1W,KAAKyW,MAAMlO,IAAI,SAAA+H,GAAI,OAAIA,EAAKlC,QAAQ,IACxD,GACA,CAAAnN,IAAA,kBAAA0B,IACA,WACI,OAAOsE,eAAK,KAAAyP,KAAI1W,KAAKyW,MAAMlO,IAAI,SAAA+H,GAAI,OAAIA,EAAKjC,OAAO,IACvD,GACA,CAAApN,IAAA,oBAAA0B,IACA,WACI,OAAOsE,eAAK,KAAAyP,KAAI1W,KAAKyW,MAAMlO,IAAI,SAAA+H,GAAI,OAAIA,EAAK9B,SAAS,IACzD,GAAC,CAAAvN,IAAA,qBAAAC,MAkDD,WAAqB,IAAAuB,EAAAzC,KACjBA,KAAK2W,YAAc,IAAIC,kBAAgB5W,KAAKyW,OACvCI,WACAC,0BACAC,iBACAC,0BAA0BhX,KAAKgU,KAAOhU,KAAKgU,KAAK9S,MAAQ,OACzDlB,KAAKgU,MACLhU,KAAKgU,KAAKc,OACL/O,QAAKsE,KAAUrK,KAAKmU,aACpBlQ,UAAU,SAAAgT,GAAG,OAAIxU,EAAKkU,YAAYK,0BAA0BC,EAAI,GAEzEjX,KAAK2W,YAAYO,OAAOjT,UAAU,kBAAMxB,EAAK0U,mBAAmB,GAEhEnX,KAAKyW,MAAMW,QAAQrR,QAAKiE,KAAU,OAAI,EAAGK,KAAUrK,KAAKmU,aAAalQ,UAAU,YACvExB,EAAK6M,WAAa7M,EAAKqN,aAGvBuH,QAAQC,UAAU7R,KAAK,WACnBhD,EAAK8S,iBACT,GAEJ9S,EAAK8U,cAEL9U,EAAKgT,uBAELhT,EAAK+U,kBAEL/U,EAAKgV,gCACLhV,EAAKkR,aAAa1R,MACtB,EACJ,GAAC,CAAAhB,IAAA,WAAAC,MACD,WACIlB,KAAKoV,gBAAkB,IAAIsC,iBAAe1X,KAAKmV,cAAUrQ,GAAW,GACpE9E,KAAK2T,aAAa1R,MACtB,GAAC,CAAAhB,IAAA,YAAAC,MACD,WACQlB,KAAK0T,YAIL1T,KAAK2X,mBACD3X,KAAK0T,UAAUpE,WAAatP,KAAKkO,YACjClO,KAAKsP,WAAatP,KAAK0T,UAAUpE,UAG7C,GAAC,CAAArO,IAAA,cAAAC,MACD,WAAc,IAAA0W,EACM,QAAhBA,EAAA5X,KAAK2W,mBAAW,IAAAiB,GAAhBA,EAAkBC,UAClB7X,KAAKmU,WAAWlS,OAChBjC,KAAKmU,WAAWzR,WAChB1C,KAAK2T,aAAajR,WAClB1C,KAAK8X,oBACT,GACA,CAAA7W,IAAA,gBAAAC,MACA,SAAc6W,GACV/X,KAAK2V,WAAaoC,EAGlB/X,KAAKoM,YAAY0C,cAAckE,aAAa,sBAAuB+E,EAAanC,GACpF,GACA,CAAA3U,IAAA,oBAAAC,MAIA,SAAkB8W,GACVA,EAAI1V,OACJtC,KAAKoM,YAAY0C,cAAckE,aAAa,mBAAoBgF,EAAIC,KAAK,MAGzEjY,KAAKoM,YAAY0C,cAAcoJ,gBAAgB,mBAEvD,GACA,CAAAjX,IAAA,aAAAC,MACA,SAAWA,GACHlB,KAAKyW,OACLzW,KAAKmY,qBAAqBjX,GAAO,EAEzC,GACA,CAAAD,IAAA,mBAAAC,MACA,SAAiBsU,GACbxV,KAAKwU,UAAYgB,CACrB,GACA,CAAAvU,IAAA,oBAAAC,MACA,SAAkBsU,GACdxV,KAAKuU,WAAaiB,CACtB,GACA,CAAAvU,IAAA,mBAAAC,MACA,SAAiBkX,GACbpY,KAAKsP,SAAW8I,EAChBpY,KAAK2T,aAAa1R,MACtB,GACA,CAAAhB,IAAA,mBAAAC,MAIA,SAAiByP,GACR3Q,KAAKqY,oBAAoB1H,IAC1B3Q,KAAKyQ,OAEb,GACA,CAAAxP,IAAA,QAAAC,MAIA,SAAMoX,GACEtY,KAAKsP,UAKLtP,KAAK2V,YAAc3V,KAAK2V,WAAWY,UAG9BvW,KAAKyW,MAAMnU,OAAS,GACzBtC,KAAK2W,YAAY4B,qBACjBvY,KAAK2T,aAAa1R,SAGlBjC,KAAKwY,YAAYF,GACjBtY,KAAK2T,aAAa1R,QAE1B,GACA,CAAAhB,IAAA,cAAAC,MACA,SAAYoX,GACJtY,KAAK2V,YACL3V,KAAK2V,WAAWlF,MAAM6H,EAE9B,GACA,CAAArX,IAAA,WAAAC,MAGA,SAASyP,GACL,IAAM8H,EAAS9H,EAAM8H,OACjBA,GAAUA,EAAO5J,UAAU6J,SAAS,cACpC1Y,KAAK2W,YAAYgC,UAAUhI,GAC3B3Q,KAAK2T,aAAa1R,OAE1B,GACA,CAAAhB,IAAA,kBAAAC,MAGA,WAEIlB,KAAKqU,UAAYrU,KAAKsU,gBAAwC,IAAtBtU,KAAKyW,MAAMnU,QAAe,EAAK,EAC3E,GACA,CAAArB,IAAA,gCAAAC,MAIA,WAEI,GAAoC,MAAhClB,KAAKkU,wBACL,GAAIlU,KAAKyW,MAAMnU,OAAQ,CACnB,IAAMsW,EAAeC,KAAKC,IAAI9Y,KAAKkU,wBAAyBlU,KAAKyW,MAAMnU,OAAS,GAChFtC,KAAK2W,YAAYoC,cAAcH,EAAY,MAG3C5Y,KAAKyQ,QAGbzQ,KAAKkU,wBAA0B,IACnC,GACA,CAAAjT,IAAA,gBAAAC,MAMA,SAAcwH,GACV,OAAOA,GAAS,GAAKA,EAAQ1I,KAAKyW,MAAMnU,MAC5C,GAAC,CAAArB,IAAA,uBAAAC,MACD,SAAqBA,GAA2B,IAAAiC,EAAAnD,KAApB0L,IAAWtH,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,KAAAA,UAAA,GAGnC,GAFApE,KAAKgZ,kBACLhZ,KAAKyW,MAAMwC,QAAQ,SAAA3I,GAAI,OAAIA,EAAK4I,UAAU,GACtCzX,MAAM0X,QAAQjY,GACdA,EAAM+X,QAAQ,SAAAG,GAAY,OAAIjW,EAAKkW,aAAaD,EAAc1N,EAAY,GAC1E1L,KAAKsZ,kBAEJ,CACD,IAAMC,EAAoBvZ,KAAKqZ,aAAanY,EAAOwK,GAG/C6N,GACI7N,GACA1L,KAAK2W,YAAYoC,cAAcQ,EAAiB,CAIhE,GACA,CAAAtY,IAAA,eAAAC,MAIA,SAAaA,GAA2B,IAAA6C,EAAA/D,KAApB0L,IAAWtH,UAAA9B,OAAA,QAAAwC,IAAAV,UAAA,KAAAA,UAAA,GACrBmV,EAAoBvZ,KAAKyW,MAAM+C,KAAK,SAAAlJ,GACtC,OAAqB,MAAdA,EAAKpP,OAAiB6C,EAAK2Q,aAAapE,EAAKpP,MAAOA,EAC/D,GACA,OAAIqY,IACA7N,EAAc6N,EAAkBE,uBAAyBF,EAAkBG,SAC3E1Z,KAAKoV,gBAAgBsE,OAAOH,IAEzBA,CACX,GAAC,CAAAtY,IAAA,uBAAAC,MACD,WAAuB,IAAAyY,EAAA3Z,KAGnBqX,QAAQC,UAAU7R,KAAK,YACfkU,EAAKjG,WAAaiG,EAAK/J,UACvB+J,EAAKxB,qBAAqBwB,EAAKjG,UAAYiG,EAAKjG,UAAUxS,MAAQyY,EAAK/J,QAAQ,GAC/E+J,EAAKhG,aAAa1R,OAE1B,EACJ,GACA,CAAAhB,IAAA,kBAAAC,MAIA,SAAgB0Y,GACZ5Z,KAAKoV,gBAAgByE,QACrB7Z,KAAKyW,MAAMwC,QAAQ,SAAA3I,GACXA,IAASsJ,GACTtJ,EAAK4I,UAEb,GACAlZ,KAAK2T,aAAa1R,MACtB,GACA,CAAAhB,IAAA,cAAAC,MAIA,WAAc,IAAA4Y,EAAA9Z,KACNA,KAAKyU,YACLzU,KAAKoV,gBAAgByE,QACrB7Z,KAAKyW,MAAMwC,QAAQ,SAAA3I,GACXA,EAAK7E,UACLqO,EAAK1E,gBAAgBsE,OAAOpJ,EAEpC,GACAtQ,KAAK2T,aAAa1R,OAE1B,GACA,CAAAhB,IAAA,oBAAAC,MACA,SAAkB6Y,GACd,IAAIC,EAEAA,EADAvY,MAAM0X,QAAQnZ,KAAKyL,UACLzL,KAAKyL,SAASlD,IAAI,SAAA+H,GAAI,OAAIA,EAAKpP,KAAK,GAGpClB,KAAKyL,SAAWzL,KAAKyL,SAASvK,MAAQ6Y,EAExD/Z,KAAK4P,OAASoK,EACdha,KAAK8U,OAAOzE,KAAK,IAAIwD,EAAwB7T,KAAMga,IACnDha,KAAK+U,YAAY1E,KAAK2J,GACtBha,KAAKwU,UAAUwF,GACfha,KAAKuN,mBAAmBiD,cAC5B,GACA,CAAAvP,IAAA,QAAAC,MACA,WAAQ,IAAA+Y,EAAAja,KACCA,KAAKwW,mBACNxW,KAAK2W,YAAYoC,eAAc,GAE9B/Y,KAAKsP,WACFtP,KAAK2V,WAKLuE,WAAW,WACFD,EAAK1D,SACN0D,EAAKE,gBAEb,GAIAna,KAAKma,iBAGjB,GACA,CAAAlZ,IAAA,iBAAAC,MACA,WACIlB,KAAKuU,aACLvU,KAAKuN,mBAAmBiD,eACxBxQ,KAAK2T,aAAa1R,MACtB,GACA,CAAAhB,IAAA,oBAAAC,MAKA,WAAoB,IAAAkZ,EAAApa,MACO,IAAnBA,KAAKqU,YACLrU,KAAKqU,WAAY,EACjB6F,WAAW,WACPE,EAAK/F,UAAY+F,EAAK9F,eAAiB,EACvC8F,EAAK7M,mBAAmBiD,cAC5B,GAER,GAAC,CAAAvP,IAAA,cAAAC,MACD,WACIlB,KAAK8X,qBACL9X,KAAKqa,sBACLra,KAAKsa,0BACLta,KAAKua,uBACT,GAAC,CAAAtZ,IAAA,qBAAAC,MACD,WACQlB,KAAKwa,yBACLxa,KAAKwa,uBAAuBpS,cAC5BpI,KAAKwa,uBAAyB,MAE9Bxa,KAAKya,wBACLza,KAAKya,sBAAsBrS,cAC3BpI,KAAKya,sBAAwB,MAE7Bza,KAAK0a,6BACL1a,KAAK0a,2BAA2BtS,cAChCpI,KAAK0a,2BAA6B,MAElC1a,KAAK2a,0BACL3a,KAAK2a,wBAAwBvS,cAC7BpI,KAAK2a,wBAA0B,KAEvC,GACA,CAAA1Z,IAAA,0BAAAC,MACA,WAA0B,IAAA0Z,EAAA5a,KACtBA,KAAK0a,2BAA6B1a,KAAK6a,qBAAqB5W,UAAU,SAAA0M,GAClEA,EAAMjN,OAAO+H,SACPmP,EAAKxF,gBAAgBsE,OAAO/I,EAAMjN,QAClCkX,EAAKxF,gBAAgB8D,SAASvI,EAAMjN,QAErCkX,EAAKzF,UACNyF,EAAKnE,MAAMwC,QAAQ,SAAA3I,IACVsK,EAAKxF,gBAAgB0F,WAAWxK,IAASA,EAAK7E,UAC/C6E,EAAK4I,UAEb,GAEAvI,EAAMjF,aACNkP,EAAKG,mBAEb,EACJ,GACA,CAAA9Z,IAAA,sBAAAC,MACA,WAAsB,IAAA8Z,EAAAhb,KAClBA,KAAKwa,uBAAyBxa,KAAKib,iBAAiBhX,UAAU,SAAA0M,GAC1D,IAAIuK,EAAYF,EAAKvE,MAAM0E,UAAUC,QAAQzK,EAAML,MAC/C0K,EAAKK,cAAcH,IACnBF,EAAKrE,YAAY2E,iBAAiBJ,GAEtCF,EAAKrH,aAAa1R,MACtB,GACAjC,KAAKya,sBAAwBza,KAAKub,gBAAgBtX,UAAU,WACxD+W,EAAKzI,QACLyI,EAAKrH,aAAa1R,MACtB,EACJ,GAAC,CAAAhB,IAAA,wBAAAC,MACD,WAAwB,IAAAsa,EAAAxb,KACpBA,KAAK2a,wBAA0B3a,KAAKyb,kBAAkBxX,UAAU,SAAA0M,GAC5D,IAAML,EAAOK,EAAML,KACb4K,EAAYM,EAAK/E,MAAM0E,UAAUC,QAAQzK,EAAML,MAIjDkL,EAAKH,cAAcH,IAAc5K,EAAK3C,YACtC6N,EAAKtH,wBAA0BgH,EAEvC,EACJ,GACA,CAAAja,IAAA,sBAAAC,MACA,SAAoByP,GAEhB,QADI+K,EAAiB/K,EAAM8H,OACpBiD,GAAkBA,IAAmB1b,KAAKoM,YAAY0C,eAAe,CACxE,GAAI4M,EAAe7M,UAAU6J,SAAS,YAClC,OAAO,EAEXgD,EAAiBA,EAAeC,cAEpC,OAAO,CACX,GACA,CAAA1a,IAAA,kBAAAC,MACA,WACI,OAAOlB,KAAKyW,OAASzW,KAAKyW,MAAMmF,KAAK,SAAAtL,GAAI,OAAIA,EAAK3C,SAAS,EAC/D,GACA,CAAA1M,IAAA,kBAAAC,MACA,WAAkB,IAAA2a,EAAA7b,KACVA,KAAKyW,OACLzW,KAAKyW,MAAMwC,QAAQ,SAAA3I,GACfA,EAAKxC,kBAAoB+N,EAAK3N,UAC9BoC,EAAKzC,kBAAoBgO,EAAK1G,SAC9B7E,EAAK1C,mBAAqBiO,EAAK5N,WACnC,EAER,KAAC6F,CAAA,CAnkBkB,CAASV,IAA1BU,SAokBYxH,UAAI,SAAAC,GAAA,WAAAA,GAAwFuH,GAh/BVrH,8BAg/B6CA,cAh/B7CA,8BAg/BuEA,qBAh/BvEA,8BAg/BwGqP,iBAAmB,GAh/B3HrP,8BAg/BwJsP,SAAS,GAh/BjKtP,8BAg/B8LsP,qBAAqB,GAh/BnNtP,8BAg/BgPuP,qBAh/BhPvP,8BAg/BiRsP,YAAY,MApkB3XjI,EAqkBYmI,UAj/BkFxP,8BAAE,CAAAC,KAi/BJoH,EAAiBnH,UAAA,oBAAA8E,eAAA,SAAAC,EAAAC,EAAAC,GAAosC,IAAAC,EAApsC,EAAAH,GAj/BfjF,2BAAEmF,EAi/BosC3E,EAAa,KAAAyE,GAj/BntCjF,2BAAEoF,EAAFpF,6BAAEkF,EAAA8E,MAAA5E,EAAA,EAAAjF,UAAA,mBAi/BsgB,GAAE,mBAAAsF,SAAA,GAAAC,aAAA,SAAAT,EAAAC,GAAA,EAAAD,GAj/B1gBjF,uBAAE,0BAi/BJkF,EAAAlB,OAAO,EAj/BLhE,CAi/BK,yBAAPkF,EAAAY,OAAO,EAj/BL9F,CAi/BK,mBAAA2F,GAAA,OAAPT,EAAAuK,SAAA9J,EAAgB,KAAAV,IAj/BdjF,2BAAE,KAAAkF,EAAAyC,MAAF3H,wBAAE,WAAAkF,EAAArC,SAAA,KAAAqC,EAAA0C,UAAF5H,CAAE,gBAAAkF,EAAA5D,KAAA4D,EAAAwK,SAAA,KAAF1P,CAAE,gBAAAkF,EAAArC,SAAAS,WAAFtD,CAAE,eAAAkF,EAAAyK,WAAF3P,CAAE,uBAAAkF,EAAAwD,SAAF1I,CAAE,OAAAkF,EAAA5D,KAAFtB,CAAE,mBAAAkF,EAAAkD,iBAAFpI,wBAAE,yBAAAkF,EAAArC,SAAF7C,CAAE,wBAAAkF,EAAAyK,WAAF3P,CAAE,yBAAAkF,EAAAwK,UAAA,EAAA1J,OAAA,CAAA1E,KAAA,OAAAsO,oBAAA,2CAAAC,kBAAA,oBAAAnH,SAAA,WAAAoH,YAAA,cAAArb,MAAA,QAAAib,SAAA,WAAA9F,YAAA,cAAA/G,SAAA,WAAAuF,gBAAA,uCAAA/E,WAAA,aAAApC,SAAA,YAAAiF,QAAA,CAAAmC,OAAA,SAAAC,YAAA,eAAAnC,SAAA,gBAAA/F,SAAA,CAAFJ,+BAi/B8kC,CAAC,CAAEK,QAAS0P,4BAA2BzP,YAAa+G,KAj/BloCrH,wCAAEgQ,mBAAAlR,EAAAmR,MAAA,EAAAC,KAAA,EAAAC,OAAA,8BAAAC,SAAA,SAAAnL,EAAAC,GAAA,EAAAD,IAAFjF,yDAAE,WAAFA,yBAAE,GAAFA,2BAi/Bw3C,EAAAqQ,OAAA,gzGAAAC,cAAA,EAAAC,gBAAA,IArkBt9ClJ,CAAiB,IA6oBnBmJ,GAAe,EAObC,EAAkB,eAAlBA,EAAkB,WA4BpB,SAAAA,EAAY9Q,EAAa+Q,IAAgB3c,OAAAR,KAAAkd,GACrCld,KAAKoM,YAAcA,EAEnBpM,KAAKuW,SAAU,EACfvW,KAAKod,YAAa,EAElBpd,KAAKqd,QAAU,IAAI9O,eAEnBvO,KAAKqW,YAAc,GAEnBrW,KAAK4V,GAAE,uBAAA1R,OAA0B+Y,MACjCjd,KAAKkO,WAAY,EACjBlO,KAAK+X,aAAe/X,KAAKoM,YAAY0C,cACrC9O,KAAKsd,kBAAoBH,EAAeG,iBAC5C,CAACtc,cAAAkc,EAAA,EAAAjc,IAAA,WAAAuO,aAxCYtO,GACLA,IACAlB,KAAKud,UAAYrc,EACjBlB,KAAKud,UAAUC,cAAcxd,MAErC,GACA,CAAAiB,IAAA,YAAA0B,IAGA,WACI,OAAO3C,KAAKod,UAChB,EAAC5N,IACD,SAActO,GACVlB,KAAKod,cAAa1N,yBAAsBxO,EAC5C,GACA,CAAAD,IAAA,WAAA0B,IACA,WACI,OAAO3C,KAAKkO,WAAclO,KAAKud,WAAavd,KAAKud,UAAUjO,QAC/D,EAACE,IACD,SAAatO,GACTlB,KAAKkO,aAAYwB,yBAAsBxO,EAC3C,GACA,CAAAD,IAAA,QAAA0B,IACA,WACI,OAAQ3C,KAAK+X,aAAa7W,KAC9B,GAAC,CAAAD,IAAA,cAAAC,MAgBD,WACIlB,KAAKud,UAAU5J,aAAa1R,MAChC,GAAC,CAAAhB,IAAA,cAAAC,MACD,WACIlB,KAAKqd,QAAQ3a,UACjB,GAAC,CAAAzB,IAAA,qBAAAC,MACD,WACIlB,KAAKyd,0BAA4Bzd,KAAKsV,KAC1C,GACA,CAAArU,IAAA,WAAAC,MACA,SAASyP,GACL,GAAIA,EASA,IANIA,EAAME,UAAY6M,SAAO,EAACC,kBAAehN,EAAO,aAChD3Q,KAAKud,UAAUpG,oBAKfxG,EAAME,UAAYE,aAAa/Q,KAAKyd,0BAGpC,OAFAzd,KAAKud,UAAU5G,YAAYiH,yBAC3BjN,EAAMC,iBAIN5Q,KAAKyd,2BAA4B,EAGzCzd,KAAK6d,aAAalN,EACtB,GACA,CAAA1P,IAAA,SAAAC,MAGA,SAAOyP,IAEE3Q,KAAKyd,2BAA6B9M,EAAME,UAAYE,aAAa/Q,KAAKsV,QACvEtV,KAAKyd,2BAA4B,EACjC9M,EAAMC,iBAEd,GACA,CAAA3P,IAAA,QAAAC,MACA,WACQlB,KAAK8d,WACL9d,KAAK6d,eAET7d,KAAKuW,SAAU,EAEVvW,KAAKud,UAAUhH,SAChBvW,KAAKud,UAAUhL,QAEnBvS,KAAKud,UAAU5J,aAAa1R,MAChC,GAAC,CAAAhB,IAAA,SAAAC,MACD,WACIlB,KAAKuW,SAAU,EACfvW,KAAKyd,0BAA4Bzd,KAAKsV,MACtCtV,KAAKud,UAAU5J,aAAa1R,MAChC,GACA,CAAAhB,IAAA,eAAAC,MACA,SAAayP,IACJ3Q,KAAK+X,aAAa7W,OAAWyP,GAC9B3Q,KAAKud,UAAUrB,SAASvL,KAEvBA,GAAS3Q,KAAK+d,gBAAgBpN,MAC/B3Q,KAAKqd,QAAQhN,KAAK,CACdlL,MAAOnF,KAAK+X,aACZ7W,MAAOlB,KAAK+X,aAAa7W,MACzB8c,UAAWhe,OAEf2Q,GAAOC,iBAEf,GAAC,CAAA3P,IAAA,WAAAC,MACD,WAEIlB,KAAKud,UAAU5J,aAAa1R,MAChC,GACA,CAAAhB,IAAA,QAAAC,MACA,SAAMoX,GACFtY,KAAK+X,aAAatH,MAAM6H,EAC5B,GACA,CAAArX,IAAA,QAAAC,MACA,WACIlB,KAAK+X,aAAa7W,MAAQ,GAC1BlB,KAAKyd,2BAA4B,CACrC,GACA,CAAAxc,IAAA,kBAAAC,MACA,SAAgByP,GACZ,QAAO,EAACgN,kBAAehN,IAAU,IAAIsN,IAAIje,KAAKsd,mBAAmBY,IAAIvN,EAAME,QAC/E,KAACqM,CAAA,CAnImB,GAAlBA,SAoIY5Q,UAAI,SAAAC,GAAA,WAAAA,GAAwF2Q,GApsCVzQ,8BAosC8CA,cApsC9CA,8BAosCwE0G,GAAgC,EApItM+J,EAqIY1Q,UArsCkFC,8BAAE,CAAAC,KAqsCJwQ,EAAkBvQ,UAAA,iCAAAC,UAAA,yCAAAsF,SAAA,EAAAC,aAAA,SAAAT,EAAAC,GAAA,EAAAD,GArsChBjF,uBAAE,mBAAA2F,GAAA,OAqsCJT,EAAAuK,SAAA9J,EAAgB,EArsCd3F,CAqsCc,iBAAA2F,GAAA,OAAhBT,EAAAwM,OAAA/L,EAAc,EArsCZ3F,CAqsCY,yBAAdkF,EAAAY,OAAO,EArsCL9F,CAqsCK,0BAAPkF,EAAAyM,QAAQ,EArsCN3R,CAqsCM,0BAARkF,EAAA0M,UAAU,KAAA3M,IArsCRjF,2BAAE,KAAAkF,EAAAiE,IAAFnJ,wBAAE,WAAAkF,EAAArC,UAAA,KAAF7C,CAAE,cAAAkF,EAAA0E,aAAA,KAAF5J,CAAE,eAAAkF,EAAA4L,WAAA5L,EAAA4L,UAAA7J,UAAA/B,EAAA4L,UAAA7J,UAAA4K,QAAA,KAAF7R,CAAE,gBAAAkF,EAAA4L,WAAA5L,EAAA4L,UAAApB,UAAA,QAAA1J,OAAA,CAAA8L,SAAA,+BAAAT,UAAA,sCAAAR,kBAAA,sDAAAjH,YAAA,cAAAT,GAAA,KAAAtG,SAAA,YAAAqD,QAAA,CAAA0K,QAAA,wBAAAzK,SAAA,mCAAA/F,SAAA,CAAFJ,oCAgkC9FyQ,CAAkB,IA6LlBsB,GAAoB,eAApBA,GAAoBxd,OAAA,SAAAwd,KAAAhe,OAAAR,KAAAwe,EAAA,GAApBA,SACYlS,UAAI,SAAAC,GAAA,WAAAA,GAAwFiS,EAAoB,EAD5HA,EAEYC,UA/vCkFhS,6BAAE,CAAAC,KA+vCS8R,IAFzGA,EAaYE,UA1wCkFjS,6BAAE,CAAAkS,UA0wC0C,CACpIC,oBACA,CACI9R,QAASqG,EACT0L,SAAU,CACNvB,kBAAmB,CAACwB,YAG/BC,QAAA,CAAYC,qBArBfR,CAAoB,qBCx0CX,SAAAS,EAAAxU,EAAAyU,IACf,MAAAA,KAAAzU,EAAAnI,UAAA4c,EAAAzU,EAAAnI,QACA,QAAA6D,EAAA,EAAAgZ,EAAA,IAAA1d,MAAAyd,GAAyC/Y,EAAA+Y,EAAS/Y,IAAAgZ,EAAAhZ,GAAAsE,EAAAtE,GAClD,OAAAgZ,CACA,mCCJe,SAAAjX,EAAAkX,GACf,YAAAA,EACA,UAAAC,eAAA,6DAEA,OAAAD,CACA,mECJe,SAAAvd,EAAAyd,EAAAC,GACf,IAAAC,SAAAja,OAAA,KAAA+Z,EAAA/Z,OAAAD,WAAAga,EAAA,cACA,IAAAE,EAAA,CACA,GAAA/d,MAAA0X,QAAAmG,KAAAE,KAAkCC,EAAAC,GAA0BJ,KAAAC,GAAAD,GAAA,iBAAAA,EAAAhd,OAAA,CAC5Dkd,IAAAF,EAAAE,GACA,IAAArZ,EAAA,EACAwZ,EAAA,aACA,OACA7d,EAAA6d,EACA5d,EAAA,WACA,OAAAoE,GAAAmZ,EAAAhd,OAAA,CACAN,MAAA,GAEA,CACAA,MAAA,EACAd,MAAAoe,EAAAnZ,KAEA,EACAhE,EAAA,SAAAyd,GACA,MAAAA,CACA,EACAxd,EAAAud,EACA,CAEA,UAAArU,UAAA,yIAEA,IAEApJ,EAFA2d,GAAA,EACAC,GAAA,EAEA,OACAhe,EAAA,WACA0d,IAAA/e,KAAA6e,EACA,EACAvd,EAAA,WACA,IAAAge,EAAAP,EAAAvd,OACA,OAAA4d,EAAAE,EAAA/d,KACA+d,CACA,EACA5d,EAAA,SAAA6d,GACAF,GAAA,EACA5d,EAAA8d,CACA,EACA5d,EAAA,WACA,KACAyd,GAAA,MAAAL,EAAA5Y,QAAA4Y,EAAA5Y,QACA,SACA,GAAAkZ,EAAA,MAAA5d,CACA,CACA,EAEA,oFChDe,SAAA5B,EAAA2f,GACf,IAAAC,KAAkCC,EAAAT,KAClC,kBACA,IACAha,EADA0a,KAAgBC,EAAAX,GAAcO,GAE9B,GAAAC,EAAA,CACA,IAAAI,KAAsBD,EAAAX,GAAc1f,MAAAugB,YACpC7a,EAAA8a,QAAAC,UAAAL,EAAAhc,UAAAkc,EAAA,MAEA5a,EAAA0a,EAAAM,MAAA1gB,KAAAoE,WAEA,OCZe,SAAAuc,EAAAvB,EAAA3e,GACf,GAAAA,IAAsB,YAAtBA,EAAemgB,EAAAlB,GAAOjf,IAAA,mBAAAA,GACtB,OAAAA,EACI,YAAAA,EACJ,UAAA6K,UAAA,4DAEA,SAASuV,EAAAnB,GAAqBN,EAC9B,CDKWuB,CAAyB3gB,KAAA0F,EACpC,CACA,kDEfe,SAAA5C,IACf,OACAA,SADA0d,QAAA,KAAAA,QAAA7d,IACA6d,QAAA7d,IAAAme,OAEA,SAAArI,EAAAsI,EAAAC,GACA,IAAAC,ECLe,SAAAC,EAAAC,EAAAJ,GACf,MAAAK,OAAApe,UAAAqe,eAAA5gB,KAAA0gB,EAAAJ,IAEA,QADAI,KAAad,EAAAX,GAAcyB,MAG3B,OAAAA,CACA,CDDiBD,CAAazI,EAAAsI,GAC9B,GAAAE,EACA,KAAAK,EAAAF,OAAAG,yBAAAN,EAAAF,GACA,OAAAO,EAAA3e,IACA2e,EAAA3e,IAAAlC,KAAA2D,UAAA9B,OAAA,EAAAmW,EAAAuI,GAEAM,EAAApgB,KAAA,CACA,EAEA4B,EAAA4d,MAAA1gB,KAAAoE,UACA,mBEhBe,SAAArB,EAAAuc,GACf,OAAAvc,EAAAqe,OAAAI,eAAAJ,OAAAf,eAAAS,OAAA,SAAAxB,GACA,OAAAA,EAAAmC,WAAAL,OAAAf,eAAAf,EACA,GACAA,EACA,mECJe,SAAAjf,EAAAqhB,EAAAC,GACf,sBAAAA,GAAA,OAAAA,EACA,UAAArW,UAAA,sDAEAoW,EAAA1e,UAAAoe,OAAAzd,OAAAge,KAAA3e,UAAA,CACAud,YAAA,CACArf,MAAAwgB,EACAE,UAAA,EACAC,cAAA,KAGAT,OAAAU,eAAAJ,EAAA,aACAE,UAAA,IAEAD,MAAkBI,EAAArC,GAAcgC,EAAAC,EAChC,mBChBe,SAAAK,IAEf,UADAxB,QAAA,MAAAA,QAAAC,WACAD,QAAAC,UAAAwB,KAAA,SACA,sBAAAC,MAAA,SACA,IACA,OAAAC,QAAAnf,UAAAof,QAAA3hB,KAAA+f,QAAAC,UAAA0B,QAAA,mBACA,CACA,OACA,QACA,CACA,kCCVe,SAAAE,EAAAC,GACf,UAAA/c,OAAA,WAAA+c,EAAA/c,OAAAD,WAAA,MAAAgd,EAAA,qBAAA7gB,MAAAC,KAAA4gB,EACA,mCCFe,SAAAC,EAAAjD,EAAAkD,GACf,OAAAD,EAAAnB,OAAAI,eAAAJ,OAAAI,eAAAV,OAAA,SAAAxB,EAAAkD,GACA,OAAAlD,EAAAmC,UAAAe,EACAlD,CACA,GACAA,EAAAkD,EACA,wFCFe,SAAA9L,EAAAjM,GACf,OCJe,SAAAgY,EAAAhY,GACf,GAAAhJ,MAAA0X,QAAA1O,GAAA,SAAiCiY,EAAAhD,GAAgBjV,EACjD,CDESgY,CAAiBhY,KAAA,EAASkY,EAAAjD,GAAejV,KAAA,EAASmY,EAAAlD,GAA0BjV,IELtE,SAAAoY,IACf,UAAAvX,UAAA,uIACA,CFG8FuX,EAC9F,mDGLe,SAAAC,EAAAxD,EAAAyD,GACf,GAAAzD,EACA,qBAAAA,EAAA,SAAoC0D,EAAAtD,GAAgBJ,EAAAyD,GACpD,IAAAhhB,EAAAqf,OAAApe,UAAA+M,SAAAtP,KAAA6e,GAAA2D,MAAA,MAEA,GADA,WAAAlhB,GAAAud,EAAAiB,cAAAxe,EAAAud,EAAAiB,YAAAtgB,MACA,QAAA8B,GAAA,QAAAA,EAAA,OAAAN,MAAAC,KAAA4d,GACA,iBAAAvd,GAAA,2CAAAmhB,KAAAnhB,GAAA,SAAsFihB,EAAAtD,GAAgBJ,EAAAyD,EAAA,CACtG","names":["ObjectUnsubscribedError","createErrorClass","_super","this","name","message","Subject","_Observable","_inherits","_createSuper","_this","_classCallCheck","call","closed","currentObservers","observers","isStopped","hasError","thrownError","_createClass","key","value","operator","subject","AnonymousSubject","_this2","errorContext","_throwIfClosed","Array","from","_step","_iterator","_createForOfIteratorHelper","s","n","done","next","err","e","f","_this3","length","shift","error","_this4","complete","get","_a","subscriber","_get","_getPrototypeOf","prototype","_checkFinalizedStatuses","_innerSubscribe","_this5","EMPTY_SUBSCRIPTION","push","Subscription","arrRemove","observable","Observable","source","create","destination","_Subject","_super2","_this6","_b","subscribe","concat","_len","arguments","args","_key","concatAll","mergeAll","popScheduler","EMPTY","subscribeOn","scheduler","delay","undefined","operate","add","schedule","scheduleAsyncIterable","input","Error","executeSchedule","iterator","Symbol","asyncIterator","then","result","scheduled","isInteropObservable","scheduleObservable","innerFrom","pipe","observeOn","isArrayLike","scheduleArray","i","isPromise","schedulePromise","isAsyncIterable","isIterable","scheduleIterable","Symbol_iterator","_iterator$next","isFunction","return","isReadableStreamLike","scheduleReadableStreamLike","readableStreamLikeToAsyncGenerator","createInvalidObservableTypeError","merge","concurrent","popNumber","Infinity","sources","createOperatorSubscriber","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_next","_assertThisInitialized","_error","unsubscribe","_complete","Subscriber","map","project","thisArg","index","mergeMap","identity","resultSelector","a","b","ii","mergeInternals","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","_loop","bufferedValue","startWith","values","take","count","seen","takeUntil","notifier","noop","last","arr","popResultSelector","pop","isScheduler","defaultValue","parentSubscription","work","repeat","scheduleSubscription","hasLift","lift","init","liftedSource","TypeError","_c0","MatLegacyChipSelectionChange","selected","isUserInput","MAT_LEGACY_CHIP_REMOVE","InjectionToken","MAT_LEGACY_CHIP_AVATAR","MAT_LEGACY_CHIP_TRAILING_ICON","_MatChipMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","MatChipBase","_elementRef","MatLegacyChipAvatar","ɵfac","t","ɵdir","i0","type","selectors","hostAttrs","features","provide","useExisting","MatLegacyChipTrailingIcon","MatLegacyChip","_MatChipMixinBase2","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","role","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","EventEmitter","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","nativeElement","appendChild","_chipRipple","RippleRenderer","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","disabled","disableRipple","set","coercedValue","coerceBooleanProperty","_dispatchSelectionChange","_value","textContent","selectable","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","emit","chip","_removeTriggerEvents","markForCheck","focus","removable","event","preventDefault","keyCode","DELETE","BACKSPACE","remove","SPACE","toggleSelected","onStable","run","i1","MAT_RIPPLE_GLOBAL_OPTIONS","DOCUMENT","ANIMATION_MODULE_TYPE","contentQueries","rf","ctx","dirIndex","_t","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","$event","_handleClick","_handleKeydown","_blur","ariaSelected","inputs","color","outputs","exportAs","MatLegacyChipRemove","_parentChip","nodeName","setAttribute","parentChip","stopPropagation","MAT_LEGACY_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","mixinErrorState","_class","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","nextUniqueId$1","MatLegacyChipListChange","MatLegacyChipList","_MatChipListBase2","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","ariaOrientation","change","valueChange","valueAccessor","_this$_selectionModel","_this$_selectionModel2","multiple","_selectionModel","_explicitRole","empty","_syncChipsState","fn","_initializeSelection","writeValue","_chipInput","id","_ref","_this$_required","_this$ngControl","_this$ngControl$contr","_required","control","hasValidator","Validators","placeholder","_placeholder","focused","_hasFocusedChip","chips","_toConsumableArray","_keyManager","FocusKeyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","SelectionModel","updateErrorState","_this$_keyManager","destroy","_dropSubscriptions","inputElement","ids","join","removeAttribute","_setSelectionByValue","isDisabled","_originatesFromChip","options","setFirstItemActive","_focusInput","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_clearSelection","forEach","deselect","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","_this7","skip","clear","_this8","fallbackValue","valueToEmit","_this9","setTimeout","_markAsTouched","_this10","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","_this11","chipSelectionChanges","isSelected","_propagateChanges","_this12","chipFocusChanges","chipIndex","toArray","indexOf","_isValidIndex","updateActiveItem","chipBlurChanges","_this13","chipRemoveChanges","currentElement","parentElement","some","_this14","i1$1","i2","i3","ɵcmp","_keydown","required","errorState","userAriaDescribedBy","errorStateMatcher","compareWith","MatLegacyFormFieldControl","ngContentSelectors","decls","vars","consts","template","styles","encapsulation","changeDetection","nextUniqueId","MatLegacyChipInput","defaultOptions","_addOnBlur","chipEnd","separatorKeyCodes","_chipList","registerInput","_focusLastChipOnBackspace","TAB","hasModifierKey","setLastItemActive","_emitChipEnd","addOnBlur","_isSeparatorKey","chipInput","Set","has","_keyup","_focus","_onInput","invalid","chipList","MatLegacyChipsModule","ɵmod","ɵinj","providers","ErrorStateMatcher","useValue","ENTER","imports","MatCommonModule","_arrayLikeToArray","len","arr2","self","ReferenceError","o","allowArrayLike","it","_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__","Z","F","_e","normalCompletion","didErr","step","_e2","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Super","getPrototypeOf","NewTarget","constructor","Reflect","construct","apply","_possibleConstructorReturn","esm_typeof","assertThisInitialized","bind","property","receiver","base","_superPropBase","object","Object","hasOwnProperty","desc","getOwnPropertyDescriptor","setPrototypeOf","__proto__","subClass","superClass","writable","configurable","defineProperty","_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_iterableToArray","iter","_setPrototypeOf","p","_arrayWithoutHoles","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_nonIterableSpread","_unsupportedIterableToArray","minLen","_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__","slice","test"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js","./node_modules/rxjs/dist/esm/internal/Subject.js","./node_modules/rxjs/dist/esm/internal/observable/concat.js","./node_modules/rxjs/dist/esm/internal/operators/concatAll.js","./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js","./node_modules/rxjs/dist/esm/internal/observable/from.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js","./node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js","./node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeAll.js","./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js","./node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js","./node_modules/rxjs/dist/esm/internal/operators/observeOn.js","./node_modules/rxjs/dist/esm/internal/operators/startWith.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/util/args.js","./node_modules/rxjs/dist/esm/internal/util/executeSchedule.js","./node_modules/rxjs/dist/esm/internal/util/isScheduler.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/@angular/material/fesm2022/legacy-chips.mjs","./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","./node_modules/@babel/runtime/helpers/esm/createSuper.js","./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","./node_modules/@babel/runtime/helpers/esm/get.js","./node_modules/@babel/runtime/helpers/esm/superPropBase.js","./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/inherits.js","./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import { createErrorClass } from './createErrorClass';\nexport const ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n});\n","import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.closed = false;\n        this.currentObservers = null;\n        this.observers = [];\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    _throwIfClosed() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    }\n    next(value) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                if (!this.currentObservers) {\n                    this.currentObservers = Array.from(this.observers);\n                }\n                for (const observer of this.currentObservers) {\n                    observer.next(value);\n                }\n            }\n        });\n    }\n    error(err) {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.hasError = this.isStopped = true;\n                this.thrownError = err;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    }\n    complete() {\n        errorContext(() => {\n            this._throwIfClosed();\n            if (!this.isStopped) {\n                this.isStopped = true;\n                const { observers } = this;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    }\n    unsubscribe() {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    }\n    get observed() {\n        var _a;\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    _trySubscribe(subscriber) {\n        this._throwIfClosed();\n        return super._trySubscribe(subscriber);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    }\n    _innerSubscribe(subscriber) {\n        const { hasError, isStopped, observers } = this;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(() => {\n            this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, thrownError, isStopped } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    }\n    error(err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    }\n    complete() {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    _subscribe(subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    }\n}\n","import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat(...args) {\n    return concatAll()(from(args, popScheduler(args)));\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n    });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable((subscriber) => {\n        executeSchedule(subscriber, scheduler, () => {\n            const iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                iterator.next().then((result) => {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable((subscriber) => {\n        let i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable((subscriber) => {\n        let iterator;\n        executeSchedule(subscriber, scheduler, () => {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                let value;\n                let done;\n                try {\n                    ({ value, done } = iterator.next());\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Infinity) {\n    return mergeMap(identity, concurrent);\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n    if (isFunction(resultSelector)) {\n        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    const buffer = [];\n    let active = 0;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    const outerNext = (value) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n    const doInnerSub = (value) => {\n        expand && subscriber.next(value);\n        active++;\n        let innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, () => {\n            innerComplete = true;\n        }, undefined, () => {\n            if (innerComplete) {\n                try {\n                    active--;\n                    while (buffer.length && active < concurrent) {\n                        const bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n        isComplete = true;\n        checkComplete();\n    }));\n    return () => {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay = 0) {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));\n    });\n}\n","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith(...values) {\n    const scheduler = popScheduler(values);\n    return operate((source, subscriber) => {\n        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {\n    const scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { MatLegacyFormFieldControl } from '@angular/material/legacy-form-field';\n\n/**\n * Event object emitted by MatChip when selected or deselected.\n * @deprecated Use `MatChipSelectionChange` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_REMOVE` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_AVATAR` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n * @deprecated Use `MAT_CHIP_TRAILING_ICON` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n * @deprecated Use `MatChipAvatar` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipAvatar {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyChipAvatar, selector: \"mat-chip-avatar, [matChipAvatar]\", host: { classAttribute: \"mat-chip-avatar\" }, providers: [{ provide: MAT_LEGACY_CHIP_AVATAR, useExisting: MatLegacyChipAvatar }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipAvatar, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-avatar, [matChipAvatar]',\n                    host: { 'class': 'mat-chip-avatar' },\n                    providers: [{ provide: MAT_LEGACY_CHIP_AVATAR, useExisting: MatLegacyChipAvatar }],\n                }]\n        }] });\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n * @deprecated Use `MatChipTrailingIcon` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipTrailingIcon {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipTrailingIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyChipTrailingIcon, selector: \"mat-chip-trailing-icon, [matChipTrailingIcon]\", host: { classAttribute: \"mat-chip-trailing-icon\" }, providers: [{ provide: MAT_LEGACY_CHIP_TRAILING_ICON, useExisting: MatLegacyChipTrailingIcon }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipTrailingIcon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                    host: { 'class': 'mat-chip-trailing-icon' },\n                    providers: [{ provide: MAT_LEGACY_CHIP_TRAILING_ICON, useExisting: MatLegacyChipTrailingIcon }],\n                }]\n        }] });\n/**\n * Material Design styled chip directive. Used inside the MatChipList component.\n * @deprecated Use `MatChip` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChip extends _MatChipMixinBase {\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return (this.disabled ||\n            this.disableRipple ||\n            this._animationsDisabled ||\n            !!this.rippleConfig.disabled);\n    }\n    /** Whether the chip is selected. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() {\n        return this._selectable && this.chipListSelectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() {\n        return this._chipListDisabled || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() {\n        return this._removable;\n    }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected)\n            ? this.selected.toString()\n            : null;\n    }\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        /** ARIA role that should be applied to the chip. */\n        this.role = 'option';\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blurred. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected,\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChip, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.Platform }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", role: \"role\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"keydown\": \"_handleKeydown($event)\", \"focus\": \"focus()\", \"blur\": \"_blur()\" }, properties: { \"attr.tabindex\": \"disabled ? null : tabIndex\", \"attr.role\": \"role\", \"class.mat-chip-selected\": \"selected\", \"class.mat-chip-with-avatar\": \"avatar\", \"class.mat-chip-with-trailing-icon\": \"trailingIcon || removeIcon\", \"class.mat-chip-disabled\": \"disabled\", \"class._mat-animation-noopable\": \"_animationsDisabled\", \"attr.disabled\": \"disabled || null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-selected\": \"ariaSelected\" }, classAttribute: \"mat-chip mat-focus-indicator\" }, queries: [{ propertyName: \"avatar\", first: true, predicate: MAT_LEGACY_CHIP_AVATAR, descendants: true }, { propertyName: \"trailingIcon\", first: true, predicate: MAT_LEGACY_CHIP_TRAILING_ICON, descendants: true }, { propertyName: \"removeIcon\", first: true, predicate: MAT_LEGACY_CHIP_REMOVE, descendants: true }], exportAs: [\"matChip\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                    inputs: ['color', 'disableRipple', 'tabIndex'],\n                    exportAs: 'matChip',\n                    host: {\n                        'class': 'mat-chip mat-focus-indicator',\n                        '[attr.tabindex]': 'disabled ? null : tabIndex',\n                        '[attr.role]': 'role',\n                        '[class.mat-chip-selected]': 'selected',\n                        '[class.mat-chip-with-avatar]': 'avatar',\n                        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                        '[class.mat-chip-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-selected]': 'ariaSelected',\n                        '(click)': '_handleClick($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { avatar: [{\n                type: ContentChild,\n                args: [MAT_LEGACY_CHIP_AVATAR]\n            }], trailingIcon: [{\n                type: ContentChild,\n                args: [MAT_LEGACY_CHIP_TRAILING_ICON]\n            }], removeIcon: [{\n                type: ContentChild,\n                args: [MAT_LEGACY_CHIP_REMOVE]\n            }], role: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selectable: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], removable: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], removed: [{\n                type: Output\n            }] } });\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n *\n * @deprecated Use `MatChipRemove` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipRemove, deps: [{ token: MatLegacyChip }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyChipRemove, selector: \"[matChipRemove]\", host: { listeners: { \"click\": \"_handleClick($event)\" }, classAttribute: \"mat-chip-remove mat-chip-trailing-icon\" }, providers: [{ provide: MAT_LEGACY_CHIP_REMOVE, useExisting: MatLegacyChipRemove }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipRemove, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matChipRemove]',\n                    host: {\n                        'class': 'mat-chip-remove mat-chip-trailing-icon',\n                        '(click)': '_handleClick($event)',\n                    },\n                    providers: [{ provide: MAT_LEGACY_CHIP_REMOVE, useExisting: MatLegacyChipRemove }],\n                }]\n        }], ctorParameters: function () { return [{ type: MatLegacyChip }, { type: i0.ElementRef }]; } });\n\n/**\n * Injection token to be used to override the default options for the chips module.\n * @deprecated Use `MAT_CHIPS_DEFAULT_OPTIONS` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n * @deprecated Use `MatChipListChange` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n * @deprecated Use `MatChipList` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipList extends _MatChipListBase {\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() {\n        if (this._explicitRole) {\n            return this._explicitRole;\n        }\n        return this.empty ? null : 'listbox';\n    }\n    set role(role) {\n        this._explicitRole = role;\n    }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() {\n        return this._selectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.subscribe(() => this._allowFocusEscape());\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled || !this.selectable) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatLegacyChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n                chip.chipListSelectable = this._selectable;\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipList, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$1.Directionality, optional: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyChipList, selector: \"mat-chip-list\", inputs: { role: \"role\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], errorStateMatcher: \"errorStateMatcher\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], selectable: \"selectable\", tabIndex: \"tabIndex\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, listeners: { \"focus\": \"focus()\", \"blur\": \"_blur()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.tabindex\": \"disabled ? null : _tabIndex\", \"attr.aria-required\": \"role ? required : null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-multiselectable\": \"multiple\", \"attr.role\": \"role\", \"class.mat-chip-list-disabled\": \"disabled\", \"class.mat-chip-list-invalid\": \"errorState\", \"class.mat-chip-list-required\": \"required\", \"attr.aria-orientation\": \"ariaOrientation\", \"id\": \"_uid\" }, classAttribute: \"mat-chip-list\" }, providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyChipList }], queries: [{ propertyName: \"chips\", predicate: MatLegacyChip, descendants: true }], exportAs: [\"matChipList\"], usesInheritance: true, ngImport: i0, template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, isInline: true, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-chip::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip._mat-animation-noopable{transition:none !important;animation:none !important}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                        '[attr.aria-required]': 'role ? required : null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.role]': 'role',\n                        '[class.mat-chip-list-disabled]': 'disabled',\n                        '[class.mat-chip-list-invalid]': 'errorState',\n                        '[class.mat-chip-list-required]': 'required',\n                        '[attr.aria-orientation]': 'ariaOrientation',\n                        'class': 'mat-chip-list',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                        '(keydown)': '_keydown($event)',\n                        '[id]': '_uid',\n                        'ngSkipHydration': '',\n                    }, providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-chip::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px) * -1)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip._mat-animation-noopable{transition:none !important;animation:none !important}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; }, propDecorators: { role: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], ariaOrientation: [{\n                type: Input,\n                args: ['aria-orientation']\n            }], selectable: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }], chips: [{\n                type: ContentChildren,\n                args: [MatLegacyChip, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n * @deprecated Use `MatChipInput` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipInput {\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() {\n        return this._addOnBlur;\n    }\n    set addOnBlur(value) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /** Whether the input is disabled. */\n    get disabled() {\n        return this._disabled || (this._chipList && this._chipList.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the input is empty. */\n    get empty() {\n        return !this.inputElement.value;\n    }\n    constructor(_elementRef, defaultOptions) {\n        this._elementRef = _elementRef;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n        this.separatorKeyCodes = defaultOptions.separatorKeyCodes;\n    }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event?.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipInput, deps: [{ token: i0.ElementRef }, { token: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatLegacyChipInput, selector: \"input[matChipInputFor]\", inputs: { chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, host: { listeners: { \"keydown\": \"_keydown($event)\", \"keyup\": \"_keyup($event)\", \"blur\": \"_blur()\", \"focus\": \"_focus()\", \"input\": \"_onInput()\" }, properties: { \"id\": \"id\", \"attr.disabled\": \"disabled || null\", \"attr.placeholder\": \"placeholder || null\", \"attr.aria-invalid\": \"_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null\", \"attr.aria-required\": \"_chipList && _chipList.required || null\" }, classAttribute: \"mat-chip-input mat-input-element\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matChipInputFor]',\n                    exportAs: 'matChipInput, matChipInputFor',\n                    host: {\n                        'class': 'mat-chip-input mat-input-element',\n                        '(keydown)': '_keydown($event)',\n                        '(keyup)': '_keyup($event)',\n                        '(blur)': '_blur()',\n                        '(focus)': '_focus()',\n                        '(input)': '_onInput()',\n                        '[id]': 'id',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.placeholder]': 'placeholder || null',\n                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                        '[attr.aria-required]': '_chipList && _chipList.required || null',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_LEGACY_CHIPS_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { chipList: [{\n                type: Input,\n                args: ['matChipInputFor']\n            }], addOnBlur: [{\n                type: Input,\n                args: ['matChipInputAddOnBlur']\n            }], separatorKeyCodes: [{\n                type: Input,\n                args: ['matChipInputSeparatorKeyCodes']\n            }], chipEnd: [{\n                type: Output,\n                args: ['matChipInputTokenEnd']\n            }], placeholder: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\nconst CHIP_DECLARATIONS = [\n    MatLegacyChipList,\n    MatLegacyChip,\n    MatLegacyChipInput,\n    MatLegacyChipRemove,\n    MatLegacyChipAvatar,\n    MatLegacyChipTrailingIcon,\n];\n/**\n * @deprecated Use `MatChipsModule` from `@angular/material/chips` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyChipsModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipsModule, declarations: [MatLegacyChipList,\n            MatLegacyChip,\n            MatLegacyChipInput,\n            MatLegacyChipRemove,\n            MatLegacyChipAvatar,\n            MatLegacyChipTrailingIcon], imports: [MatCommonModule], exports: [MatLegacyChipList,\n            MatLegacyChip,\n            MatLegacyChipInput,\n            MatLegacyChipRemove,\n            MatLegacyChipAvatar,\n            MatLegacyChipTrailingIcon] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipsModule, providers: [\n            ErrorStateMatcher,\n            {\n                provide: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS,\n                useValue: {\n                    separatorKeyCodes: [ENTER],\n                },\n            },\n        ], imports: [MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatLegacyChipsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: CHIP_DECLARATIONS,\n                    declarations: CHIP_DECLARATIONS,\n                    providers: [\n                        ErrorStateMatcher,\n                        {\n                            provide: MAT_LEGACY_CHIPS_DEFAULT_OPTIONS,\n                            useValue: {\n                                separatorKeyCodes: [ENTER],\n                            },\n                        },\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LEGACY_CHIPS_DEFAULT_OPTIONS, MAT_LEGACY_CHIP_AVATAR, MAT_LEGACY_CHIP_REMOVE, MAT_LEGACY_CHIP_TRAILING_ICON, MatLegacyChip, MatLegacyChipAvatar, MatLegacyChipInput, MatLegacyChipList, MatLegacyChipListChange, MatLegacyChipRemove, MatLegacyChipSelectionChange, MatLegacyChipTrailingIcon, MatLegacyChipsModule };\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]}