{"version":3,"file":"7131.1b4063c3255f08d7.js","mappings":"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","names":["EMPTY","Observable","subscriber","complete","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","pipe","mapOneOrManyArgs","_ref","isEventTarget","addEventListener","removeEventListener","map","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","_ref2","_slicedToArray","add","remove","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","_len","arguments","length","args","Array","_key","next","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_Subscriber","_inherits","_super","_createSuper","shouldUnsubscribe","_thisSuper","_thisSuper2","_thisSuper3","_this","_classCallCheck","this","call","_next","value","err","error","_get","_assertThisInitialized","_getPrototypeOf","prototype","_error","unsubscribe","_complete","_createClass","key","_a","closed","Subscriber","auditTime","duration","scheduler","asyncScheduler","audit","durationSelector","operate","source","hasValue","lastValue","durationSubscriber","isComplete","endDuration","cleanupDuration","subscribe","timer","takeUntil","notifier","noop","hasLift","lift","init","liftedSource","isArray","fn","callOrApply","apply","_toConsumableArray","listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","coerceElement","info","get","subject","result","Subject","cssClass","listener","event","animationName","classList","contains","run","isAutofilled","runOutsideAngular","set","unlisten","delete","_this2","forEach","_info","stopMonitoring","ɵfac","t","i0","i1","ɵprov","token","factory","providedIn","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","EventEmitter","_this3","monitor","emit","ɵdir","type","selectors","outputs","CdkTextareaAutosize","document","_this4","_destroyed","_enabled","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","_document","_textareaElement","nativeElement","_minRows","coerceNumberProperty","_setMinHeight","_maxRows","_setMaxHeight","coerceBooleanProperty","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","minHeight","minRows","_cachedLineHeight","concat","style","maxHeight","maxRows","_this5","_initialHeight","height","window","_getWindow","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","_measureScrollHeight","_this6","force","_cacheTextareaLineHeight","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_getDocument","defaultView","isStopped","setSelectionRange","selectionStart","selectionEnd","DOCUMENT","hostAttrs","hostBindings","rf","ctx","_noopInputHandler","inputs","enabled","exportAs","TextFieldModule","ɵmod","ɵinj","_arrayLikeToArray","arr","len","i","arr2","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_0__","Z","F","s","n","done","e","_e","f","normalCompletion","didErr","step","_e2","return","Reflect","bind","property","receiver","base","_superPropBase","object","Object","hasOwnProperty","getPrototypeOf","desc","getOwnPropertyDescriptor","_iterableToArray","iter","from","_arrayWithoutHoles","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_nonIterableSpread","_unsupportedIterableToArray","minLen","_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__","toString","slice","constructor","name","test"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/rxjs/dist/esm/internal/util/lift.js","./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js","./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","./node_modules/@babel/runtime/helpers/esm/get.js","./node_modules/@babel/runtime/helpers/esm/superPropBase.js","./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nexport class OperatorSubscriber extends Subscriber {\n    constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        super(destination);\n        this.onFinalize = onFinalize;\n        this.shouldUnsubscribe = shouldUnsubscribe;\n        this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : super._next;\n        this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._error;\n        this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : super._complete;\n    }\n    unsubscribe() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            const { closed } = this;\n            super.unsubscribe();\n            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return (source) => {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n","import { map } from \"../operators/map\";\nconst { isArray } = Array;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn(...args) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(args => callOrApply(fn, args));\n}\n","import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }]; } });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: AutofillMonitor }]; }, propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: ['cdkTextareaAutosize']\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TextFieldModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}