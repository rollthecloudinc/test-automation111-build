{"version":3,"file":"8158.797e810298041051.js","mappings":"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","names":["EMPTY","Observable","subscriber","complete","merge","_len","arguments","length","args","Array","_key","scheduler","popScheduler","concurrent","popNumber","Infinity","sources","innerFrom","mergeAll","from","take","count","operate","source","seen","subscribe","createOperatorSubscriber","value","next","tap","observerOrNext","error","tapObserver","isFunction","_a","call","isUnsub","err","_b","unsubscribe","finalize","identity","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_classCallCheck","this","positions","Map","_createClass","clear","elements","_this","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","concat","context","getContext","drawImage","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_this2","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","Subscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","preventDefault","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","_pickupPositionOnPage","activeTransform","_applyRootElementTransform","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","_startDragSequence","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","handle","_placeholder","getPlaceholderElement","getRootElement","handles","_this3","coerceElement","disabledHandles","add","template","_previewTemplate","_placeholderTemplate","rootElement","_this4","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","boundaryElement","_this5","change","_containInsideBoundaryOnResize","parent","_parentDragRef","_this$_anchor","_this$_rootElement","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","delete","direction","_previewContainer","_this$_preview","_this$_previewRef","_preview","_previewRef","destroy","_this$_placeholder","_this$_placeholderRef","_placeholderRef","_this6","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","_this7","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_this8","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_ref","_ref2","_this9","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","preview","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","margin","zIndex","classList","setAttribute","isArray","className","_this10","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","handler","_this10$_preview","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","_ref3","_this$_pickupPosition","pickupX","pickupY","boundaryRect","_this$_getPreviewRect","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","_this$_previewTemplat","currentPosition","pickupPosition","_this$_passiveTransfo","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_this$_parentPosition","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","push","_cacheItemPositions","predicate","_sortPredicate","_this11","_this11$_itemPosition","p","reverse","_this12","_ref4","_ref5","_sortFromLastPointerPosition","elementToMeasure","getVisibleElement","sort","a","b","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","_this13","_ref6","floor","SCROLL_PROXIMITY_THRESHOLD","DropListRef","_this14","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","timer","asyncScheduler","animationFrameScheduler","pipe","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","withSortPredicate","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","_this15","previousItems","_withDropContainer","filter","every","connectedTo","_scrollableElements","_toConsumableArray","size","_clientRect","result","_this16","scrollNode","verticalScrollDirection","horizontalScrollDirection","_getElementScrollDire","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","_getElementScrollDire2","_slicedToArray","_this$_viewportRuler$","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_this17","_stopReceiving","reset","_canReceive","elementFromPoint","nativeElement","_this18","activeSiblings","initiator","receiver","_this19","updateOnScroll","_this20","draggedItems","getActiveItemsSnapshot","_startReceiving","activeCapturingEventOptions","capture","DragDropRegistry","_this21","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_this22","_this23","startsWith","e","options","config","_clearGlobalListeners","_this24","streams","observer","_this25","instance","_this26","ɵfac","t","i0","DOCUMENT","ɵprov","token","factory","providedIn","DEFAULT_CONFIG","DragDrop","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","ɵdir","selectors","hostAttrs","inputs","standalone","features","provide","useExisting","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","data","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_this27","_destroyed","EventEmitter","subscription","_dragRef","movedEvent","createDrag","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","getFreeDragPosition","_this28","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","_this29","removeItem","dispose","_element$parentElemen","closest","boundary","ref","_this30","dir","coerceNumberProperty","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withPreviewContainer","withDirection","_CdkDrag$_dragInstanc","_this31","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","_this32","startWith","childHandleElements","withHandles","switchMap","handleInstance","dragRef","disableHandle","enableHandle","i1$1","contentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_scrollDispatcher","_group","_this33","id","_unsortedItems","createDropList","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","_this34","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","_this35","listAutoScrollDisabled","listOrientation","getSortedItems","useValue","DragDropModule","ɵmod","ɵinj","providers","imports","CdkScrollableModule"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5]}