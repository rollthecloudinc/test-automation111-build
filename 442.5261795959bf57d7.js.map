{"version":3,"file":"442.5261795959bf57d7.js","mappings":"6LAEaA,EAAa,SAAAC,IAAAC,OAAAF,EAAAC,GAAA,IAAAE,KAAAC,KAAAJ,GACtB,SAAAA,IAAwG,IAAAK,EAA5FC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IAAUC,EAAWJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,IAAUE,EAAkBL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGM,IAAqBC,cAAAC,KAAAf,IAClGK,EAAAF,EAAAa,KAAAD,OACKT,YAAcA,EACnBD,EAAKM,YAAcA,EACnBN,EAAKO,mBAAqBA,EAC1BP,EAAKY,QAAU,GACfZ,EAAKa,qBAAsB,EAC3Bb,EAAKa,oBAAsBP,IAAgBD,IAC3CL,EAAKC,YAAca,KAAKC,IAAI,EAAGd,GAC/BD,EAAKM,YAAcQ,KAAKC,IAAI,EAAGT,GAAaN,CAChD,CAACgB,cAAArB,EAAA,EAAAsB,IAAA,OAAAC,MACD,SAAKA,GACD,IAAmBN,EAAkEF,KAAlEE,QAASC,EAAyDH,KAAzDG,oBAAqBN,EAAoCG,KAApCH,mBAAoBD,EAAgBI,KAAhBJ,YAAgBI,KAA7ES,YAEJP,EAAQQ,KAAKF,IACZL,GAAuBD,EAAQQ,KAAKb,EAAmBc,MAAQf,IAEpEI,KAAKY,eAAW,EAChBC,QAAAC,KAAA7B,EAAA8B,WAAA,OAAAf,MAAAC,KAAAD,KAAWQ,EACf,GAAC,CAAAD,IAAA,aAAAC,MACD,SAAWQ,GACPhB,KAAKiB,iBACLjB,KAAKY,cAIL,QAHMM,EAAelB,KAAKmB,gBAAgBH,GAClCb,EAAiCH,KAAjCG,oBACFiB,EADmCpB,KAAZE,QACRmB,QACZC,EAAI,EAAGA,EAAIF,EAAK3B,SAAWuB,EAAWO,OAAQD,GAAKnB,EAAsB,EAAI,EAClFa,EAAWQ,KAAKJ,EAAKE,IAEzB,OAAAtB,KAAKyB,wBAAwBT,GACtBE,CACX,GAAC,CAAAX,IAAA,cAAAC,MACD,WACI,IAAQjB,EAAkES,KAAlET,YAAaM,EAAqDG,KAArDH,mBAAoBK,EAAiCF,KAAjCE,QAASC,EAAwBH,KAAxBG,oBAC5CuB,GAAsBvB,EAAsB,EAAI,GAAKZ,EAE3D,GADAA,EAAcI,KAAY+B,EAAqBxB,EAAQT,QAAUS,EAAQyB,OAAO,EAAGzB,EAAQT,OAASiC,IAC/FvB,EAAqB,CAGtB,QAFMQ,EAAMd,EAAmBc,MAC3BiB,EAAO,EACFN,EAAI,EAAGA,EAAIpB,EAAQT,QAAUS,EAAQoB,IAAMX,EAAKW,GAAK,EAC1DM,EAAON,EAEXM,GAAQ1B,EAAQyB,OAAO,EAAGC,EAAO,EAAC,CAE1C,KAAC3C,CAAA,CA7CqB,CAAS4C,wHCI7BC,EAA0B,CAAC,cAAe,kBAC1CC,EAAqB,CAAC,mBAAoB,uBAC1CC,EAAgB,CAAC,KAAM,OACtB,SAASC,EAAUC,EAAQC,EAAWC,EAASC,GAKlD,MAJIC,KAAWF,KACXC,EAAiBD,EACjBA,OAAU1C,GAEV2C,EACA,OAAOJ,EAAUC,EAAQC,EAAWC,GAASG,QAAKC,KAAiBH,IAEvE,IAAAI,EA+BJ,SAASC,EAAcR,GACnB,SAAOI,KAAWJ,EAAOS,oBAAgB,EAAKL,KAAWJ,EAAOU,oBACpE,CAjC0BF,CAAcR,GAC9BH,EAAmBc,IAAI,SAACC,GAAU,OAAK,SAACC,GAAO,OAAKb,EAAOY,GAAYX,EAAWY,EAASX,EAAQ,IAwB7G,SAASY,EAAwBd,GAC7B,SAAOI,KAAWJ,EAAOe,eAAW,EAAKX,KAAWJ,EAAOgB,eAC/D,CAxBYF,CAAwBd,GAClBJ,EAAwBe,IAAIM,EAAwBjB,EAAQC,IAwB9E,SAASiB,EAA0BlB,GAC/B,SAAOI,KAAWJ,EAAOmB,MAAE,EAAKf,KAAWJ,EAAOoB,IACtD,CAzBkBF,CAA0BlB,GACtBF,EAAca,IAAIM,EAAwBjB,EAAQC,IAClD,GAAEoB,KAAAC,KAAAf,EAAA,GAPbgB,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GAQlB,IAAKE,MACGE,KAAYzB,GACZ,SAAO0B,KAAS,SAACC,GAAS,OAAK5B,EAAU4B,EAAW1B,EAAWC,EAAQ,EAAvE,EAAuE,EAAE0B,MAAU5B,IAG3F,IAAKuB,EACD,MAAM,IAAIM,UAAU,wBAExB,OAAO,IAAIC,IAAW,SAAChD,GACnB,IAAM+B,EAAU,WAAH,QAAAkB,EAAAzE,UAAAC,OAAOyE,EAAI,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAA5E,UAAA4E,GAAA,OAAKpD,EAAWQ,KAAK,EAAI0C,EAAKzE,OAASyE,EAAOA,EAAK,GAAG,EAC9ET,SAAIV,GACG,kBAAMW,EAAOX,EAAQ,CAChC,EACJ,CACA,SAASI,EAAwBjB,EAAQC,GACrC,OAAO,SAACW,GAAU,OAAK,SAACC,GAAO,OAAKb,EAAOY,GAAYX,EAAWY,EAAQ,EAC9E,+DCvCO,SAASsB,IAAY,QAAAJ,EAAAzE,UAAAC,OAANyE,EAAI,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAA5E,UAAA4E,GACtB,IAAME,KAAYC,MAAaL,GAC/B,SAAOM,KAAKN,EAAMI,EACtB,+FCFO,SAASG,EAAUC,GAAsC,IAA5BJ,EAAS9E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGmF,IAC5C,OCDG,SAASC,EAAMC,GAClB,SAAOC,KAAQ,SAACC,EAAQ/D,GACpB,IAAIgE,GAAW,EACXC,EAAY,KACZC,EAAqB,KACrBC,GAAa,EACXC,EAAc,WAGhB,GAFwEF,GAAmBG,cAC3FH,EAAqB,KACjBF,EAAU,CACVA,GAAW,EACX,IAAMxE,EAAQyE,EACdA,EAAY,KACZjE,EAAWQ,KAAKhB,EAAK,CAEzB2E,GAAcnE,EAAWsE,UAC7B,EACMC,EAAkB,WACpBL,EAAqB,KACrBC,GAAcnE,EAAWsE,UAC7B,EACAP,EAAOS,aAAUC,KAAyBzE,EAAY,SAACR,GACnDwE,GAAW,EACXC,EAAYzE,EACP0E,MACDpB,MAAUe,EAAiBrE,IAAQgF,UAAWN,KAAqBO,KAAyBzE,EAAYoE,EAAaG,GAE7H,EAAG,WACCJ,GAAa,IACXH,IAAaE,GAAsBA,EAAmB3D,SAAWP,EAAWsE,UAClF,GACJ,EACJ,CD/BWV,CAAM,oBAAMc,KAAMhB,EAAUJ,EAAU,EACjD,yEEFO,SAASqB,EAAqBC,GAAoC,IAAxBC,EAAWrG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGsG,IAC3DF,SAAaA,GAA4DG,KAClEjB,KAAQ,SAACC,EAAQ/D,GACpB,IAAIgF,EACAC,GAAQ,EACZlB,EAAOS,aAAUC,KAAyBzE,EAAY,SAACR,GACnD,IAAM0F,EAAaL,EAAYrF,IAC3ByF,IAAUL,EAAWI,EAAaE,MAClCD,GAAQ,EACRD,EAAcE,EACdlF,EAAWQ,KAAKhB,GAExB,GACJ,EACJ,CACA,SAASuF,EAAeI,EAAGC,GACvB,OAAOD,IAAMC,CACjB,8DClBO,SAASC,EAAOC,EAAWC,GAC9B,SAAOzB,KAAQ,SAACC,EAAQ/D,GACpB,IAAIwF,EAAQ,EACZzB,EAAOS,aAAUC,KAAyBzE,EAAY,SAACR,GAAK,OAAK8F,EAAUrG,KAAKsG,EAAS/F,EAAOgG,MAAYxF,EAAWQ,KAAKhB,EAAM,GACtI,EACJ,mFCHO,SAASiG,IAAoB,IAAdrE,EAAO5C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7BkH,EAAqHtE,EAA7GuE,iBAAS,IAAAD,EAAG,kBAAM,IAAI7E,GAAS,EAAA6E,EAAAE,EAA8ExE,EAA5EyE,oBAAY,IAAAD,GAAOA,EAAAE,EAAyD1E,EAAvD2E,uBAAe,IAAAD,GAAOA,EAAAE,EAAiC5E,EAA/B6E,2BAAmB,IAAAD,GAAOA,EAChH,OAAO,SAACE,GACJ,IAAIC,EACAC,EACAC,EACAC,EAAW,EACXC,GAAe,EACfC,GAAa,EACXC,EAAc,WACkDL,GAAgB/B,cAClF+B,OAAkB1H,CACtB,EACMgI,EAAQ,WACVD,IACAN,EAAaE,OAAU3H,EACvB6H,EAAeC,GAAa,CAChC,EACMG,EAAsB,WACxB,IAAMC,EAAOT,EACbO,IAC4CE,GAAKvC,aACrD,EACA,SAAOP,KAAQ,SAACC,EAAQ/D,GACpBsG,KACKE,IAAeD,GAChBE,IAEJ,IAAMI,EAAQR,EAAUA,GAAmDV,IAC3E3F,EAAWyC,IAAI,WAEM,KADjB6D,IACuBE,IAAeD,IAClCH,EAAkBU,EAAYH,EAAqBV,GAE3D,GACAY,EAAKrC,UAAUxE,IACVmG,GACDG,EAAW,IACXH,EAAa,IAAIY,KAAe,CAC5BvG,KAAM,SAAChB,GAAK,OAAKqH,EAAKrG,KAAKhB,EAAM,EACjCwH,MAAO,SAACC,GACJT,GAAa,EACbC,IACAL,EAAkBU,EAAYJ,EAAOb,EAAcoB,GACnDJ,EAAKG,MAAMC,EACf,EACA3C,SAAU,WACNiC,GAAe,EACfE,IACAL,EAAkBU,EAAYJ,EAAOX,GACrCc,EAAKvC,UACT,KACH,EACDxB,MAAUiB,GAAQS,UAAU2B,GAEpC,EAhCA,CAgCGD,EACP,CACJ,CACA,SAASY,EAAYJ,EAAOrE,GACxB,IAAW,IAAPA,GAIJ,IAAW,IAAPA,EAQD,SALG6E,EAAe,IAAIH,KAAe,CACpCvG,KAAM,WACF0G,EAAa7C,cACbqC,GACJ,IACDzD,EAAAzE,UAAAC,OAb4ByE,EAAI,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,EAAA,GAAA5E,UAAA4E,GAcnC,OAAOf,EAAE8E,WAAA,EAAIjE,GAAMsB,UAAU0C,EAAY,OAZrCR,GAaR,8DC3EO,SAASU,EAAYC,EAAoBC,EAAYhE,GACxD,IAAIiE,EACAjB,GAAW,EACf,GAAIe,GAAoD,iBAAvBA,EAAiC,KAAAG,EACmBH,EAA9EE,kBAAU,IAAAC,EAAG7I,IAAQ6I,EAAA,IAAAC,EAAyDJ,EAAvDC,kBAAU,IAAAG,EAAG9I,IAAQ8I,EAAA,IAAAC,EAAkCL,EAAhCf,gBAAQ,IAAAoB,GAAQA,EAAEpE,EAAc+D,EAAd/D,eAGnEiE,EAAcF,GAAoF1I,IAEtG,SAAO8G,KAAM,CACTE,UAAW,kBAAM,IAAI1H,IAAcsJ,EAAYD,EAAYhE,EAAU,EACrEuC,cAAc,EACdE,iBAAiB,EACjBE,oBAAqBK,GAE7B,wCChBIqB,8EADAC,EAAa,EAEXC,EAAgB,CAAC,EACvB,SAASC,EAAmBC,GACxB,OAAIA,KAAUF,WACHA,EAAcE,IACd,EAGf,CACO,ICTCC,EDUQ,SAACC,GACT,IAAMF,EAASH,IACfC,SAAcE,IAAU,EACnBJ,IACDA,EAAWO,QAAQC,WAEvBR,EAASS,KAAK,kBAAMN,EAAmBC,IAAWE,GAAI,GAC/CF,CACX,EClBkBM,EDmBJ,SAACN,GACXD,EAAmBC,EACvB,ECpBSO,EAAoB,CAC7BN,aAAY,WACR,IAAQO,EAAaD,EAAbC,SACR,OAA6DA,GAASP,cAAiBA,GAAYb,WAAA,EAAA3I,UACvG,EACA6J,eAAc,SAACN,GACX,IAAQQ,EAAaD,EAAbC,SACR,OAA6DA,GAASF,gBAAmBA,GAAgBN,EAC7G,EACAQ,cAAU7J,GCTD8J,EAAU,SAAAC,IAAAtK,OAAAqK,EAAAC,GAAA,IAAArK,KAAAC,KAAAmK,GACnB,SAAAA,EAAYlF,EAAWoF,GAAM,IAAApK,EAAAS,cAAAC,KAAAwJ,IACzBlK,EAAAF,EAAAa,KAAAD,KAAMsE,EAAWoF,IACZpF,UAAYA,EACjBhF,EAAKoK,KAAOA,EAAKpK,CACrB,CAACgB,cAAAkJ,EAAA,EAAAjJ,IAAA,iBAAAC,MACD,SAAe8D,EAAWqF,GAAe,IAAXC,EAAKpK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClC,OAAc,OAAVoK,GAAkBA,EAAQ,KAC1B/I,QAAAC,KAAA0I,EAAAzI,WAAA,iBAAAf,MAAAC,KAAAD,KAA4BsE,EAAWqF,EAAIC,IAE/CtF,EAAUuF,QAAQnJ,KAAKV,MAChBsE,EAAUwF,aAAexF,EAAUwF,WAAaR,eAA+BhF,EAAUyF,MAAMC,KAAK1F,OAAW5E,KAC1H,GAAC,CAAAa,IAAA,iBAAAC,MACD,SAAe8D,EAAWqF,GAAe,IACjCM,EADsBL,EAAKpK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAElC,GAAa,MAAToK,EAAgBA,EAAQ,EAAI5J,KAAK4J,MAAQ,EACzC,SAAA/I,QAAAC,KAAA0I,EAAAzI,WAAA,iBAAAf,MAAAC,KAAAD,KAA4BsE,EAAWqF,EAAIC,GAE/C,IAAQC,EAAYvF,EAAZuF,QACE,MAANF,IAAsD,QAAtCM,EAAKJ,EAAQA,EAAQpK,OAAS,UAAuB,IAAPwK,OAAgB,EAASA,EAAGN,MAAQA,IAClGL,iBAAiCK,GACjCrF,EAAUwF,gBAAapK,EAG/B,KAAC8J,CAAA,CAxBkB,CAASU,KCAnBC,EAAgB,ICDH,SAAAC,IAAAjL,OAAAkL,EAAAD,GAAA,IAAAhL,KAAAC,KAAAgL,GAAA,SAAAA,IAAAtK,cAAAC,KAAAqK,GAAAjL,EAAA+I,MAAAnI,KAAAR,UAAA,CAAAc,cAAA+J,EAAA,EAAA9J,IAAA,QAAAC,MACtB,SAAM8J,GACFtK,KAAKuK,SAAU,EACf,IAAMC,EAAUxK,KAAK8J,WACrB9J,KAAK8J,gBAAapK,EAClB,IACIsI,EADI6B,EAAY7J,KAAZ6J,QAERS,EAASA,GAAUT,EAAQY,QAC3B,MACSzC,EAAQsC,EAAOI,QAAQJ,EAAOK,MAAOL,EAAOV,OAC7C,aAEEU,EAAST,EAAQ,KAAOS,EAAOX,KAAOa,GAAWX,EAAQY,SAEnE,GADAzK,KAAKuK,SAAU,EACXvC,EAAO,CACP,MAAQsC,EAAST,EAAQ,KAAOS,EAAOX,KAAOa,GAAWX,EAAQY,SAC7DH,EAAOjF,cAEX,MAAM2C,EAEd,KAACqC,CAAA,CApBqB,UAASO,GDCN,CAAkBpB,+DEAxC,SAASqB,EAAaC,GACzB,QAASA,IAAQA,aAAe9G,QAAe1B,KAAWwI,EAAIC,QAAI,EAAKzI,KAAWwI,EAAItF,WAC1F,8DCHQwF,EAAY7G,MAAZ6G,QAID,SAASxI,EAAiByI,GAC7B,SAAOpI,KAAI,SAAAqB,GAAI,OAJnB,SAASgH,EAAYD,EAAI/G,GACrB,OAAO8G,EAAQ9G,GAAQ+G,EAAE9C,WAAA,KAAAgD,KAAIjH,IAAQ+G,EAAG/G,EAC5C,CAEuBgH,CAAYD,EAAI/G,EAAK,EAC5C,k3BCMAkH,GAAA,mBAAAC,GAAA,MACMC,EAA0B,IAAIC,iBAAe,2BAG7CC,GAA8B,WAMhC,SAAAA,EAAYC,EAAUC,EAAaC,IAAa5L,OAAAC,KAAAwL,GAC5CxL,KAAK4L,qBAAuB,IAAI/J,IAEhC7B,KAAK6L,oBAAsB7L,KAAK4L,qBAAqBrJ,QAAKoD,QAE1D3F,KAAK8L,UAAY,KACjB9L,KAAK+L,UAAYN,EACjBzL,KAAKgM,aAAeN,EACpB1L,KAAKiM,aAAeN,CACxB,CACArL,cAAAkL,EAAA,EAAAjL,IAAA,SAAAC,MAIA,SAAO0L,GACHlM,KAAK8L,UAAYI,EACjBlM,KAAKmM,0BACLnM,KAAKoM,sBACT,GACA,CAAA7L,IAAA,SAAAC,MACA,WACIR,KAAK4L,qBAAqBtG,WAC1BtF,KAAK8L,UAAY,IACrB,GACA,CAAAvL,IAAA,0BAAAC,MAMA,SAAwBiL,EAAUC,EAAaC,GAI3C3L,KAAK+L,UAAYN,EACjBzL,KAAKgM,aAAeN,EACpB1L,KAAKiM,aAAeN,EACpB3L,KAAKmM,0BACLnM,KAAKoM,sBACT,GACA,CAAA7L,IAAA,oBAAAC,MACA,WACIR,KAAKoM,sBACT,GACA,CAAA7L,IAAA,sBAAAC,MACA,WACIR,KAAKmM,0BACLnM,KAAKoM,sBACT,GACA,CAAA7L,IAAA,oBAAAC,MACA,WACI,GAEJ,CAAAD,IAAA,0BAAAC,MACA,WACI,GAEJ,CAAAD,IAAA,gBAAAC,MAKA,SAAcgG,EAAO6F,GACbrM,KAAK8L,WACL9L,KAAK8L,UAAUQ,eAAe9F,EAAQxG,KAAK+L,UAAWM,EAE9D,GACA,CAAA9L,IAAA,0BAAAC,MACA,WACSR,KAAK8L,WAGV9L,KAAK8L,UAAUS,oBAAoBvM,KAAK8L,UAAUU,gBAAkBxM,KAAK+L,UAC7E,GACA,CAAAxL,IAAA,uBAAAC,MACA,WACI,GAAKR,KAAK8L,UAGV,KAAMW,EAAgBzM,KAAK8L,UAAUY,mBAC/BC,EAAW,CAAEC,MAAOH,EAAcG,MAAOC,IAAKJ,EAAcI,KAC5DC,EAAe9M,KAAK8L,UAAUiB,kBAC9BC,EAAahN,KAAK8L,UAAUU,gBAC9BS,EAAejN,KAAK8L,UAAUoB,sBAE9BC,EAAoBnN,KAAK+L,UAAY,EAAIkB,EAAejN,KAAK+L,UAAY,EAE7E,GAAIY,EAASE,IAAMG,EAAY,CAE3B,IAAMI,EAAkBhN,KAAKiN,KAAKP,EAAe9M,KAAK+L,WAChDuB,EAAkBlN,KAAKC,IAAI,EAAGD,KAAKmN,IAAIJ,EAAmBH,EAAaI,IAGzED,GAAqBG,IACrBH,EAAoBG,EACpBL,EAAeK,EAAkBtN,KAAK+L,UACtCY,EAASC,MAAQxM,KAAKoN,MAAML,IAEhCR,EAASE,IAAMzM,KAAKC,IAAI,EAAGD,KAAKmN,IAAIP,EAAYL,EAASC,MAAQQ,GAAgB,CAErF,IAAMK,EAAcR,EAAeN,EAASC,MAAQ5M,KAAK+L,UACzD,GAAI0B,EAAczN,KAAKgM,cAAkC,GAAlBW,EAASC,MAAY,CACxD,IAAMc,EAActN,KAAKiN,MAAMrN,KAAKiM,aAAewB,GAAezN,KAAK+L,WACvEY,EAASC,MAAQxM,KAAKC,IAAI,EAAGsM,EAASC,MAAQc,GAC9Cf,EAASE,IAAMzM,KAAKmN,IAAIP,EAAY5M,KAAKiN,KAAKF,GAAqBL,EAAe9M,KAAKgM,cAAgBhM,KAAK+L,WAAU,KAErH,CACD,IAAM4B,EAAYhB,EAASE,IAAM7M,KAAK+L,WAAakB,EAAeH,GAClE,GAAIa,EAAY3N,KAAKgM,cAAgBW,EAASE,KAAOG,EAAY,CAC7D,IAAMY,EAAYxN,KAAKiN,MAAMrN,KAAKiM,aAAe0B,GAAa3N,KAAK+L,WAC/D6B,EAAY,IACZjB,EAASE,IAAMzM,KAAKmN,IAAIP,EAAYL,EAASE,IAAMe,GACnDjB,EAASC,MAAQxM,KAAKC,IAAI,EAAGD,KAAKoN,MAAML,EAAoBnN,KAAKgM,aAAehM,KAAK+L,YAAU,EAI3G/L,KAAK8L,UAAU+B,iBAAiBlB,GAChC3M,KAAK8L,UAAUgC,yBAAyB9N,KAAK+L,UAAYY,EAASC,OAClE5M,KAAK4L,qBAAqBpK,KAAKpB,KAAKoN,MAAML,GAAkB,CAChE,KAAC3B,CAAA,CA7H+B,GAqIpC,SAASuC,GAAuCC,GAC5C,OAAOA,EAAaC,eACxB,CACA,IACMC,GAAyB,eAAzBA,EAAyB,WAC3B,SAAAA,KAAcnO,OAAAC,KAAAkO,GACVlO,KAAK+L,UAAY,GACjB/L,KAAKgM,aAAe,IACpBhM,KAAKiM,aAAe,IAEpBjM,KAAKiO,gBAAkB,IAAIzC,GAA+BxL,KAAKyL,SAAUzL,KAAK0L,YAAa1L,KAAK2L,YACpG,CACArL,cAAA4N,EAAA,EAAA3N,IAAA,WAAA4N,IACA,WACI,OAAOnO,KAAK+L,SAChB,EAACqC,IACD,SAAa5N,GACTR,KAAK+L,aAAYsC,wBAAqB7N,EAC1C,GACA,CAAAD,IAAA,cAAA4N,IAIA,WACI,OAAOnO,KAAKgM,YAChB,EAACoC,IACD,SAAgB5N,GACZR,KAAKgM,gBAAeqC,wBAAqB7N,EAC7C,GACA,CAAAD,IAAA,cAAA4N,IAGA,WACI,OAAOnO,KAAKiM,YAChB,EAACmC,IACD,SAAgB5N,GACZR,KAAKiM,gBAAeoC,wBAAqB7N,EAC7C,GAAC,CAAAD,IAAA,cAAAC,MACD,WACIR,KAAKiO,gBAAgBK,wBAAwBtO,KAAKyL,SAAUzL,KAAK0L,YAAa1L,KAAK2L,YACvF,KAACuC,CAAA,CApC0B,GAAzBA,SAqCYK,UAAI,SAAAC,GAAA,WAAAA,GAAwFN,EAAyB,EArCjIA,EAsCYO,UADkFC,8BAAE,CAAAC,KACJT,EAAyBU,UAAA,gDAAAC,OAAA,CAAApD,SAAA,WAAAC,YAAA,cAAAC,YAAA,eAAAmD,YAAA,EAAAC,SAAA,CADvBL,+BACqM,CAC7R,CACIM,QAAS1D,EACT2D,WAAYlB,GACZmB,KAAM,IAACC,cAAW,kBAAMjB,CAAyB,OALmCQ,oCArC9FR,CAAyB,IAoEzBkB,GAAsB,GAKtBC,EAAgB,eAAhBA,EAAgB,WAClB,SAAAA,EAAYC,EAASC,EAAWC,IAAUzP,OAAAC,KAAAqP,GACtCrP,KAAKsP,QAAUA,EACftP,KAAKuP,UAAYA,EAEjBvP,KAAKyP,UAAY,IAAI5N,IAErB7B,KAAK0P,oBAAsB,KAE3B1P,KAAK2P,eAAiB,EAKtB3P,KAAK4P,iBAAmB,IAAIC,IAC5B7P,KAAK8P,UAAYN,CACrB,CACAlP,cAAA+O,EAAA,EAAA9O,IAAA,WAAAC,MAKA,SAASuP,GAAY,IAAAzQ,EAAAU,KACZA,KAAK4P,iBAAiBI,IAAID,IAC3B/P,KAAK4P,iBAAiBxB,IAAI2B,EAAYA,EAAWE,kBAAkBzK,UAAU,kBAAMlG,EAAKmQ,UAAUjO,KAAKuO,EAAW,GAE1H,GACA,CAAAxP,IAAA,aAAAC,MAIA,SAAWuP,GACP,IAAMG,EAAsBlQ,KAAK4P,iBAAiBzB,IAAI4B,GAClDG,IACAA,EAAoB7K,cACpBrF,KAAK4P,iBAAgBO,OAAQJ,GAErC,GACA,CAAAxP,IAAA,WAAAC,MAUA,WAA8C,IAAA4P,EAAApQ,KAArCqQ,EAAa7Q,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG4P,GACrB,OAAKpP,KAAKuP,UAAUe,UAGb,IAAItM,IAAW,SAACuM,GACdH,EAAKV,qBACNU,EAAKI,qBAIT,IAAMtP,EAAemP,EAAgB,EAC/BD,EAAKX,UAAUlN,QAAKkC,KAAU4L,IAAgB7K,UAAU+K,GACxDH,EAAKX,UAAUjK,UAAU+K,GAC/BH,SAAKT,iBACE,WACHzO,EAAamE,cACb+K,EAAKT,iBACAS,EAAKT,gBACNS,EAAKK,uBAEb,CACJ,IAAC,EAnBUpM,OAoBf,GAAC,CAAA9D,IAAA,cAAAC,MACD,WAAc,IAAAkQ,EAAA1Q,KACVA,KAAKyQ,wBACLzQ,KAAK4P,iBAAiBe,QAAQ,SAACC,EAAGC,GAAS,OAAKH,EAAKI,WAAWD,EAAU,GAC1E7Q,KAAKyP,UAAUnK,UACnB,GACA,CAAA/E,IAAA,mBAAAC,MAMA,SAAiBuQ,EAAqBV,GAClC,IAAMW,EAAYhR,KAAKiR,4BAA4BF,GACnD,OAAO/Q,KAAKkR,SAASb,GAAe9N,QAAK8D,KAAO,SAAAnE,GAC5C,OAAQA,GAAU8O,EAAUG,QAAQjP,IAAU,CAClD,GACJ,GACA,CAAA3B,IAAA,8BAAAC,MACA,SAA4BuQ,GAAqB,IAAAK,EAAApR,KACvCqR,EAAsB,GAC5B,OAAArR,KAAK4P,iBAAiBe,QAAQ,SAACW,EAAevB,GACtCqB,EAAKG,2BAA2BxB,EAAYgB,IAC5CM,EAAoB3Q,KAAKqP,EAEjC,GACOsB,CACX,GACA,CAAA9Q,IAAA,aAAAC,MACA,WACI,OAAOR,KAAK8P,UAAU0B,aAAeC,MACzC,GACA,CAAAlR,IAAA,6BAAAC,MACA,SAA2BuP,EAAYgB,GACnC,IAAIW,KAAUC,iBAAcZ,GACxBa,EAAoB7B,EAAW8B,gBAAgBC,cAGnD,MACQJ,GAAWE,EACX,OAAO,QAELF,EAAUA,EAAQK,eAC5B,OAAO,CACX,GACA,CAAAxR,IAAA,qBAAAC,MACA,WAAqB,IAAAwR,EAAAhS,KACjBA,KAAK0P,oBAAsB1P,KAAKsP,QAAQ2C,kBAAkB,WACtD,IAAMR,EAASO,EAAKE,aACpB,SAAOjQ,KAAUwP,EAAOjC,SAAU,UAAUhK,UAAU,kBAAMwM,EAAKvC,UAAUjO,MAAM,EACrF,EACJ,GACA,CAAAjB,IAAA,wBAAAC,MACA,WACQR,KAAK0P,sBACL1P,KAAK0P,oBAAoBrK,cACzBrF,KAAK0P,oBAAsB,KAEnC,KAACL,CAAA,CAhIiB,GAAhBA,SAiIYd,UAAI,SAAAC,GAAA,WAAAA,GAAwFa,GArKVX,qBAqK4CA,UArK5CA,qBAqKkEyD,YArKlEzD,qBAqK0F0D,YAAQ,KAjIhM/C,EAkIYgD,WAtKkF3D,+BAAE,CAAA4D,MAsKYjD,EAAgBkD,QAAhBlD,EAAgBd,UAAAiE,WAAc,SAlI1InD,CAAgB,IAmJhBoD,EAAa,eAAbA,EAAa,WACf,SAAAA,EAAYC,EAAYC,EAAkBC,EAAQC,GAAK,IAAAC,EAAA9S,MAAAD,OAAAC,KAAAyS,GACnDzS,KAAK0S,WAAaA,EAClB1S,KAAK2S,iBAAmBA,EACxB3S,KAAK4S,OAASA,EACd5S,KAAK6S,IAAMA,EACX7S,KAAK+S,WAAa,IAAIlR,IACtB7B,KAAKgT,iBAAmB,IAAIhP,IAAW,SAACuM,GAAQ,OAAKuC,EAAKF,OAAOX,kBAAkB,oBAAMhQ,KAAU6Q,EAAKJ,WAAWZ,cAAe,UAC7HvP,QAAK0Q,KAAUH,EAAKC,aACpBvN,UAAU+K,EAAS,EAAC,EAC7B,CAACjQ,cAAAmS,EAAA,EAAAlS,IAAA,WAAAC,MACD,WACIR,KAAK2S,iBAAiBO,SAASlT,KACnC,GAAC,CAAAO,IAAA,cAAAC,MACD,WACIR,KAAK2S,iBAAiB7B,WAAW9Q,MACjCA,KAAK+S,WAAWvR,OAChBxB,KAAK+S,WAAWzN,UACpB,GACA,CAAA/E,IAAA,kBAAAC,MACA,WACI,OAAOR,KAAKgT,gBAChB,GACA,CAAAzS,IAAA,gBAAAC,MACA,WACI,OAAOR,KAAK0S,UAChB,GACA,CAAAnS,IAAA,WAAAC,MAQA,SAAS4B,GACL,IAAM+Q,EAAKnT,KAAK0S,WAAWZ,cACrBsB,EAAQpT,KAAK6S,KAAyB,OAAlB7S,KAAK6S,IAAIrS,MAEf,MAAhB4B,EAAQiR,OACRjR,EAAQiR,KAAOD,EAAQhR,EAAQyK,IAAMzK,EAAQwK,OAE5B,MAAjBxK,EAAQkR,QACRlR,EAAQkR,MAAQF,EAAQhR,EAAQwK,MAAQxK,EAAQyK,KAG9B,MAAlBzK,EAAQmR,SACRnR,EAAQoR,IACJL,EAAGM,aAAeN,EAAGO,aAAetR,EAAQmR,QAGhDH,GAAmC,IAAnCA,EAASO,2BACW,MAAhBvR,EAAQiR,OACRjR,EAAQkR,MACJH,EAAGS,YAAcT,EAAGU,YAAczR,EAAQiR,MAEpB,IAFoBA,EAE9CM,0BACAvR,EAAQiR,KAAOjR,EAAQkR,MAEQ,IAFRA,EAElBK,4BACLvR,EAAQiR,KAAOjR,EAAQkR,OAASlR,EAAQkR,MAAQlR,EAAQkR,QAIvC,MAAjBlR,EAAQkR,QACRlR,EAAQiR,KACJF,EAAGS,YAAcT,EAAGU,YAAczR,EAAQkR,OAGtDtT,KAAK8T,sBAAsB1R,EAC/B,GAAC,CAAA7B,IAAA,wBAAAC,MACD,SAAsB4B,GAClB,IAAM+Q,EAAKnT,KAAK0S,WAAWZ,eAC3B,EAAIiC,4BACAZ,EAAGa,SAAS5R,IAGO,MAAfA,EAAQoR,MACRL,EAAGc,UAAY7R,EAAQoR,KAEP,MAAhBpR,EAAQiR,OACRF,EAAGe,WAAa9R,EAAQiR,MAGpC,GACA,CAAA9S,IAAA,sBAAAC,MASA,SAAoBgE,GAChB,IAAM2P,EAAO,OACPC,EAAQ,QACRjB,EAAKnT,KAAK0S,WAAWZ,cAC3B,GAAY,OAARtN,EACA,OAAO2O,EAAGc,UAEd,GAAY,UAARzP,EACA,OAAO2O,EAAGM,aAAeN,EAAGO,aAAeP,EAAGc,UAGlD,IAAMb,EAAQpT,KAAK6S,KAAyB,OAAlB7S,KAAK6S,IAAIrS,MAOnC,MANY,SAARgE,EACAA,EAAO4O,EAAQgB,EAAQD,EAEV,OAAR3P,IACLA,EAAO4O,EAAQe,EAAOC,GAEtBhB,GAAmC,IAAnCA,EAASO,0BAGLnP,GAAQ2P,EACDhB,EAAGS,YAAcT,EAAGU,YAAcV,EAAGe,WAGrCf,EAAGe,WAGTd,GAAmC,IAAnCA,EAASO,0BAGVnP,GAAQ2P,EACDhB,EAAGe,WAAaf,EAAGS,YAAcT,EAAGU,aAGnCV,EAAGe,WAMX1P,GAAQ2P,EACDhB,EAAGe,WAGHf,EAAGS,YAAcT,EAAGU,YAAcV,EAAGe,UAGxD,KAACzB,CAAA,CA9Ic,GAAbA,SA+IYlE,UAAI,SAAAC,GAAA,WAAAA,GAAwFiE,GAtUV/D,8BAsUyCA,cAtUzCA,8BAsUmEW,GAtUnEX,8BAsUgGA,UAtUhGA,8BAsUsH2F,iBAAiB,KA/IrO5B,EAgJYhE,UAvUkFC,8BAAE,CAAAC,KAuUJ8D,EAAa7D,UAAA,mDAAAE,YAAA,IAhJzG2D,CAAa,IA6Jb6B,GAAsB,GAKtBC,GAAa,eAAbA,EAAa,WACf,SAAAA,EAAYhF,EAAWqD,EAAQpD,GAAU,IAAAgF,EAAAxU,MAAAD,OAAAC,KAAAuU,GACrCvU,KAAKuP,UAAYA,EAEjBvP,KAAKyU,QAAU,IAAI5S,IAEnB7B,KAAK0U,gBAAkB,SAACC,GACpBH,EAAKC,QAAQjT,KAAKmT,EACtB,EACA3U,KAAK8P,UAAYN,EACjBoD,EAAOX,kBAAkB,WACrB,GAAI1C,EAAUe,UAAW,CACrB,IAAMmB,EAAS+C,EAAKtC,aAGpBT,EAAO9O,iBAAiB,SAAU6R,EAAKE,iBACvCjD,EAAO9O,iBAAiB,oBAAqB6R,EAAKE,gBAAe,CAIrEF,EAAKI,SAASpP,UAAU,kBAAOgP,EAAKK,cAAgB,IAAI,EAC5D,EACJ,CAACvU,cAAAiU,EAAA,EAAAhU,IAAA,cAAAC,MACD,WACI,GAAIR,KAAKuP,UAAUe,UAAW,CAC1B,IAAMmB,EAASzR,KAAKkS,aACpBT,EAAO7O,oBAAoB,SAAU5C,KAAK0U,iBAC1CjD,EAAO7O,oBAAoB,oBAAqB5C,KAAK0U,gBAAe,CAExE1U,KAAKyU,QAAQnP,UACjB,GACA,CAAA/E,IAAA,kBAAAC,MACA,WACSR,KAAK6U,eACN7U,KAAK8U,sBAET,IAAMC,EAAS,CAAEC,MAAOhV,KAAK6U,cAAcG,MAAOC,OAAQjV,KAAK6U,cAAcI,QAE7E,OAAKjV,KAAKuP,UAAUe,YAChBtQ,KAAK6U,cAAgB,MAElBE,CACX,GACA,CAAAxU,IAAA,kBAAAC,MACA,WAUI,IAAM0U,EAAiBlV,KAAKmV,4BAC5BC,EAA0BpV,KAAK+M,kBAAvBiI,EAAKI,EAALJ,MAAOC,EAAMG,EAANH,OACf,MAAO,CACHzB,IAAK0B,EAAe1B,IACpBH,KAAM6B,EAAe7B,KACrBE,OAAQ2B,EAAe1B,IAAMyB,EAC7B3B,MAAO4B,EAAe7B,KAAO2B,EAC7BC,SACAD,QAER,GACA,CAAAzU,IAAA,4BAAAC,MACA,WAGI,IAAKR,KAAKuP,UAAUe,UAChB,MAAO,CAAEkD,IAAK,EAAGH,KAAM,GAQ3B,IAAM7D,EAAWxP,KAAK8P,UAChB2B,EAASzR,KAAKkS,aACdmD,EAAkB7F,EAAS6F,gBAC3BC,EAAeD,EAAgBE,wBAWrC,MAAO,CAAE/B,KAVI8B,EAAa9B,KACtBhE,EAASgG,KAAKvB,WACdxC,EAAOgE,SACPJ,EAAgBpB,WAChB,EAMUZ,MALAiC,EAAajC,MACvB7D,EAASgG,KAAKtB,YACdzC,EAAOiE,SACPL,EAAgBnB,YAChB,EAER,GACA,CAAA3T,IAAA,SAAAC,MAKA,WAA2C,IAApCmV,EAAYnW,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG8U,GAClB,OAAOqB,EAAe,EAAI3V,KAAKyU,QAAQlS,QAAKkC,KAAUkR,IAAiB3V,KAAKyU,OAChF,GACA,CAAAlU,IAAA,aAAAC,MACA,WACI,OAAOR,KAAK8P,UAAU0B,aAAeC,MACzC,GACA,CAAAlR,IAAA,sBAAAC,MACA,WACI,IAAMiR,EAASzR,KAAKkS,aACpBlS,KAAK6U,cAAgB7U,KAAKuP,UAAUe,UAC9B,CAAE0E,MAAOvD,EAAOmE,WAAYX,OAAQxD,EAAOoE,aAC3C,CAAEb,MAAO,EAAGC,OAAQ,EAC9B,KAACV,CAAA,CAhHc,GAAbA,SAiHYhG,UAAI,SAAAC,GAAA,WAAAA,GAAwF+F,GA1cV7F,qBA0cyCyD,YA1czCzD,qBA0ciEA,UA1cjEA,qBA0cuF0D,YAAQ,KAjH7LmC,EAkHYlC,WA3ckF3D,+BAAE,CAAA4D,MA2cYiC,EAAahC,QAAbgC,EAAahG,UAAAiE,WAAc,SAlHvI+B,CAAa,IA8HbuB,EAAqB,IAAIvK,iBAAe,sBAIxCwK,EAAoB,eAApBA,EAAoB,SAAAC,IAAA7W,OAAA4W,EAAAC,GAAA,IAAA5W,KAAAC,KAAA0W,GACtB,SAAAA,EAAYrD,EAAYC,EAAkBC,EAAQC,GAAK9S,cAAAC,KAAA+V,GAAA3W,EAAAa,KAAAD,KAC7C0S,EAAYC,EAAkBC,EAAQC,EAChD,CACAvS,cAAAyV,EAAA,EAAAxV,IAAA,sBAAAC,MAKA,SAAoByV,GAChB,IAAMC,EAAalW,KAAK0S,WAAWZ,cACnC,MAAuB,eAAhBmE,EAA+BC,EAAWrC,YAAcqC,EAAWxC,YAC9E,KAACqC,CAAA,CAZqB,CAAStD,GAA7BsD,SAaYxH,UAAI,SAAAC,GAAA,WAAAA,GAAwFuH,GAxeVrH,8BAwegDA,cAxehDA,8BAwe0EW,GAxe1EX,8BAweuGA,UAxevGA,8BAwe6H2F,iBAAiB,KAb5O0B,EAcYtH,UAzekFC,8BAAE,CAAAC,KAyeJoH,EAAoBhH,SAAA,CAzelBL,0CA2d9FqH,CAAoB,IA+BpBI,UAA0BC,sBAA0B,IAAcC,IAA0BlM,IAE5FmM,GAAwB,eAAxBA,EAAwB,SAAAC,IAAApX,OAAAmX,EAAAC,GAAA,IAAAC,KAAAnX,KAAAiX,GAqB1B,SAAAA,EAAY5D,EAAY+D,EAAoB7D,EAAQ3E,EAAiB4E,EAAKF,EAAkB+D,EAAe3G,GAAY,IAAA4G,EAAA5W,cAAAC,KAAAsW,IACnHK,EAAAH,EAAAvW,KAAAD,KAAM0S,EAAYC,EAAkBC,EAAQC,IACvCH,WAAaA,EAClBiE,EAAKF,mBAAqBA,EAC1BE,EAAK1I,gBAAkBA,EACvB0I,EAAK5G,WAAaA,EAClB4G,EAAKpH,aAAYqH,UAAOC,YAExBF,EAAKG,iBAAmB,IAAIjV,IAE5B8U,EAAKI,sBAAwB,IAAIlV,IACjC8U,EAAKK,aAAe,WACpBL,EAAKM,aAAc,EAMnBN,EAAK9K,oBAAsB,IAAI7H,IAAW,SAACuM,GAAQ,OAAKoG,EAAK1I,gBAAgBpC,oBAAoBrG,UAAU,SAAAgB,IAAK,OAAI0C,QAAQC,UAAUC,KAAK,kBAAMuN,EAAK/D,OAAOsE,IAAI,kBAAM3G,EAAS/O,KAAKgF,GAAM,EAAC,EAAC,EAAC,GAE9LmQ,EAAKQ,oBAAsBR,EAAKI,sBAIhCJ,EAAKS,kBAAoB,EAEzBT,EAAKU,mBAAqB,GAE1BV,EAAKW,oBAAsB,GAE3BX,EAAKY,eAAiB,CAAE3K,MAAO,EAAGC,IAAK,GAEvC8J,EAAKa,YAAc,EAEnBb,EAAK9B,cAAgB,EAErB8B,EAAKc,uBAAyB,EAK9Bd,EAAKe,oCAAqC,EAE1Cf,EAAKgB,2BAA4B,EAEjChB,EAAKiB,yBAA2B,GAEhCjB,EAAKkB,iBAAmBC,WAIxBnB,EAAKkB,iBAAmBnB,EAAc9B,SAASpP,UAAU,WACrDmR,EAAKoB,mBACT,GACKpB,EAAK5G,aAEN4G,EAAKjE,WAAWZ,cAAckG,UAAUvU,IAAI,0BAC5CkT,EAAK5G,cAAUkI,KAAAtB,IAClBA,CACL,CAACrW,cAAAgW,EAAA,EAAA/V,IAAA,cAAA4N,eA7EG,OAAOnO,KAAKgX,YAChB,EAAC5I,IACD,SAAgB6H,GACRjW,KAAKgX,eAAiBf,IACtBjW,KAAKgX,aAAef,EACpBjW,KAAKkY,uBAEb,GACA,CAAA3X,IAAA,aAAA4N,IAIA,WACI,OAAOnO,KAAKiX,WAChB,EAAC7I,IACD,SAAe5N,GACXR,KAAKiX,eAAckB,yBAAsB3X,EAC7C,GAAC,CAAAD,IAAA,WAAAC,MA6DD,WAAW,IAAA4X,EAAApY,KAEFA,KAAKuP,UAAUe,YAGhBtQ,KAAK+P,aAAe/P,OAAA,EACpBa,QAAAC,KAAAwV,EAAAvV,WAAA,WAAAf,MAAAC,KAAAD,MAMJA,KAAK4S,OAAOX,kBAAkB,kBAAM/I,QAAQC,UAAUC,KAAK,WACvDgP,EAAKC,uBACLD,EAAKnK,gBAAgBqK,OAAOF,GAC5BA,EAAKrI,WACAE,kBACA1N,QAELgW,KAAU,OAAI,EAId9T,KAAU,EAAG0R,KACR3Q,UAAU,kBAAM4S,EAAKnK,gBAAgBuK,mBAAmB,GAC7DJ,EAAKK,4BACT,EAAE,GACN,GAAC,CAAAlY,IAAA,cAAAC,MACD,WACIR,KAAK0Y,SACL1Y,KAAKiO,gBAAgByK,SAErB1Y,KAAK+W,sBAAsBzR,WAC3BtF,KAAK8W,iBAAiBxR,WACtBtF,KAAK6X,iBAAiBxS,eAAW,EACjCxE,QAAAC,KAAAwV,EAAAvV,WAAA,cAAAf,MAAAC,KAAAD,KACJ,GACA,CAAAO,IAAA,SAAAC,MACA,SAAOmY,GAAO,IAAAC,EAAA5Y,KAOVA,KAAK4S,OAAOX,kBAAkB,WAC1B2G,EAAKC,OAASF,EACdC,EAAKC,OAAOC,WAAWvW,QAAK0Q,KAAU2F,EAAK9B,mBAAmBtR,UAAU,SAAAuT,GACpE,IAAMC,EAAYD,EAAKtZ,OACnBuZ,IAAcJ,EAAKpB,cACnBoB,EAAKpB,YAAcwB,EACnBJ,EAAK3K,gBAAgBgL,uBAEzBL,EAAKM,oBACT,EACJ,EACJ,GACA,CAAA3Y,IAAA,SAAAC,MACA,WACIR,KAAK6Y,OAAS,KACd7Y,KAAK8W,iBAAiBtV,MAC1B,GACA,CAAAjB,IAAA,gBAAAC,MACA,WACI,OAAOR,KAAKwX,WAChB,GACA,CAAAjX,IAAA,kBAAAC,MACA,WACI,OAAOR,KAAK6U,aAChB,GAKA,CAAAtU,IAAA,mBAAAC,MACA,WACI,OAAOR,KAAKuX,cAChB,GAAC,CAAAhX,IAAA,4CAAAC,MACD,SAA0CgE,GACtC,OAAOxE,KAAK6R,gBAAgBC,cAAcyD,wBAAwB/Q,EACtE,GACA,CAAAjE,IAAA,sBAAAC,MAIA,SAAoB2Y,GACZnZ,KAAKoX,oBAAsB+B,IAC3BnZ,KAAKoX,kBAAoB+B,EACzBnZ,KAAKkY,uBACLlY,KAAKyY,6BAEb,GACA,CAAAlY,IAAA,mBAAAC,MACA,SAAiB4Y,GAAO,IAAAC,EAAArZ,MAxL5B,SAASsZ,GAAYC,EAAIC,GACrB,OAAOD,EAAG3M,OAAS4M,EAAG5M,OAAS2M,EAAG1M,KAAO2M,EAAG3M,GAChD,EAuLayM,CAAYtZ,KAAKuX,eAAgB6B,KAC9BpZ,KAAKyZ,aACLL,EAAQ,CAAExM,MAAO,EAAGC,IAAKzM,KAAKC,IAAIL,KAAKuX,eAAe1K,IAAKuM,EAAMvM,OAErE7M,KAAK+W,sBAAsBvV,KAAMxB,KAAKuX,eAAiB6B,GACvDpZ,KAAKyY,2BAA2B,kBAAMY,EAAKpL,gBAAgByL,mBAAmB,GAEtF,GACA,CAAAnZ,IAAA,kCAAAC,MAGA,WACI,OAAOR,KAAK0X,mCAAqC,KAAO1X,KAAKyX,sBACjE,GACA,CAAAlX,IAAA,2BAAAC,MAIA,SAAyBmZ,GAAyB,IAAAC,EAAA5Z,KAAjB6Z,EAAEra,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,WAElCma,EAAS3Z,KAAKyZ,YAAqB,aAAPI,EAAoB,EAAIF,EAGpD,IACMG,EAAmC,cAApB9Z,KAAKiW,YACpB8D,EAAOD,EAAe,IAAM,IAC5BE,EAAgBF,GAHR9Z,KAAK6S,KAAyB,OAAlB7S,KAAK6S,IAAIrS,OAGW,EAAK,EAC/CyZ,EAAS,YAAAC,OAAeH,EAAI,KAAAG,OAAIC,OAAOH,EAAgBL,GAAO,OAClE3Z,KAAKyX,uBAAyBkC,EACnB,WAAPE,IACAI,GAAS,aAAAC,OAAiBH,EAAI,WAI9B/Z,KAAK0X,oCAAqC,GAE1C1X,KAAKoa,2BAA6BH,IAGlCja,KAAKoa,0BAA4BH,EACjCja,KAAKyY,2BAA2B,WACxBmB,EAAKlC,oCACLkC,EAAKnC,wBAA0BmC,EAAKS,6BACpCT,EAAKlC,oCAAqC,EAC1CkC,EAAK9L,yBAAyB8L,EAAKnC,yBAGnCmC,EAAK3L,gBAAgBqM,yBAE7B,GAER,GACA,CAAA/Z,IAAA,iBAAAC,MAOA,SAAemZ,GAA2B,IAChCvX,EAAU,CAAEiK,SADS7M,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAEL,eAArBQ,KAAKiW,YACL7T,EAAQwK,MAAQ+M,EAGhBvX,EAAQoR,IAAMmG,EAElB3Z,KAAK+P,WAAWiE,SAAS5R,EAC7B,GACA,CAAA7B,IAAA,gBAAAC,MAKA,SAAcgG,GACVxG,KAAKiO,gBAAgBsM,cAAc/T,EADVhH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAEhC,GACA,CAAAe,IAAA,sBAAAC,MAKA,SAAoBgE,GAAM,IAAAgW,EAAAxa,KAGtB,OAMOI,KAAKC,IAAI,GANZL,KAAK+P,YAAc/P,KACG,SAACya,GAAK,SAAA5Z,QAAAC,KAAAwV,EAAAvV,WAAA,sBAAAyZ,GAAAva,KAAAua,EAA+BC,EAAK,EAG1C,SAACA,GAAK,OAAKD,EAAKzK,WAAW7C,oBAAoBuN,EAAM,GAExCjW,IAA8B,eAArBxE,KAAKiW,YAA+B,QAAU,QAC1FjW,KAAK0a,wBACb,GACA,CAAAna,IAAA,wBAAAC,MAIA,SAAsBgE,GAAM,IAAAmW,EACpBC,EACEzG,EAAO,OACPC,EAAQ,QACRhB,EAA2B,QAAX,QAARuH,EAAA3a,KAAK6S,WAAG,IAAA8H,OAAA,EAARA,EAAUna,OAalBqa,EAAqB7a,KAAK+P,WAAW+K,0CAXvCF,EADQ,SAARpW,EACW4O,EAAQgB,EAAQD,EAEd,OAAR3P,EACM4O,EAAQe,EAAOC,EAErB5P,IAI2B,eAArBxE,KAAKiW,YAA+B,OAAS,QAI5D,OAD2BjW,KAAK0S,WAAWZ,cAAcyD,wBAAwBqF,GACrDC,CAChC,GACA,CAAAta,IAAA,6BAAAC,MACA,WACI,IAAMua,EAAY/a,KAAKgb,gBAAgBlJ,cACvC,MAA4B,eAArB9R,KAAKiW,YAA+B8E,EAAUE,YAAcF,EAAUG,YACjF,GACA,CAAA3a,IAAA,mBAAAC,MAIA,SAAiB4Y,GACb,OAAKpZ,KAAK6Y,OAGH7Y,KAAK6Y,OAAOsC,iBAAiB/B,EAAOpZ,KAAKiW,aAFrC,CAGf,GACA,CAAA1V,IAAA,oBAAAC,MACA,WAEIR,KAAKqY,uBACLrY,KAAKiO,gBAAgBgL,qBACzB,GACA,CAAA1Y,IAAA,uBAAAC,MACA,WACIR,KAAK6U,cAAgB7U,KAAK+P,WAAWqL,oBAAoBpb,KAAKiW,YAClE,GACA,CAAA1V,IAAA,6BAAAC,MACA,SAA2B6a,GAAU,IAAAC,EAAAtb,KAC7Bqb,GACArb,KAAK4X,yBAAyBlX,KAAK2a,GAIlCrb,KAAK2X,4BACN3X,KAAK2X,2BAA4B,EACjC3X,KAAK4S,OAAOX,kBAAkB,kBAAM/I,QAAQC,UAAUC,KAAK,WACvDkS,EAAKpC,oBACT,EAAE,GAEV,GACA,CAAA3Y,IAAA,qBAAAC,MACA,WAAqB,IAAA+a,EAAAvb,KACjBA,KAAK2X,2BAA4B,EAKjC3X,KAAKgb,gBAAgBlJ,cAAc0J,MAAMvB,UAAYja,KAAKoa,0BAI1Dpa,KAAK4S,OAAOsE,IAAI,kBAAMqE,EAAK9E,mBAAmBgF,cAAc,GAC5D,IAAMC,EAA0B1b,KAAK4X,yBACrC5X,KAAK4X,yBAA2B,GAAG,IACK+D,EADLC,KAAAC,KAClBH,GAAuB,IAAxC,IAAAE,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,OACI/Q,EADS0Q,EAAAnb,QAEZ,OAAAyH,GAAA2T,EAAAK,EAAAhU,EAAA,SAAA2T,EAAAM,GAAA,CACL,GACA,CAAA3b,IAAA,uBAAAC,MACA,WACIR,KAAKsX,oBACoB,eAArBtX,KAAKiW,YAA+B,GAAE,GAAAiE,OAAMla,KAAKoX,kBAAiB,MACtEpX,KAAKqX,mBACoB,eAArBrX,KAAKiW,YAA4B,GAAAiE,OAAMla,KAAKoX,kBAAiB,MAAO,EAC5E,KAACd,CAAA,CArWyB,CAASP,GAAjCO,SAsWY/H,UAAI,SAAAC,GAAA,WAAAA,GAAwF8H,GAl2BV5H,8BAk2BoDA,cAl2BpDA,8BAk2B8EA,qBAl2B9EA,8BAk2B+GA,UAl2B/GA,8BAk2BqIpD,EAAuB,GAl2B5JoD,8BAk2ByL2F,iBAAiB,GAl2B1M3F,8BAk2BuOW,GAl2BvOX,8BAk2BoQ6F,IAl2BpQ7F,8BAk2B8RoH,EAAkB,KAtW9YQ,EAuWY6F,UAn2BkFzN,8BAAE,CAAAC,KAm2BJ2H,EAAwB1H,UAAA,kCAAAwN,UAAA,SAAAC,EAAAC,GAn2BpB,IAAAC,EAm2BoB,EAAAF,GAn2BtB3N,wBAAEtD,GAAA,KAAAiR,GAAF3N,2BAAE6N,EAAF7N,6BAAE4N,EAAAtB,gBAAAuB,EAAAtW,MAAA,EAAAuW,UAAA,kCAAAC,SAAA,EAAAC,aAAA,SAAAL,EAAAC,GAAA,EAAAD,GAAF3N,wBAAE,2DAAA4N,EAAArG,YAAFvH,CAAE,yDAAA4N,EAAArG,YAAA,EAAApH,OAAA,CAAAoH,YAAA,cAAAwD,WAAA,cAAAkD,QAAA,CAAA9Q,oBAAA,uBAAAiD,YAAA,EAAAC,SAAA,CAAFL,+BAm2B4c,CACpiB,CACIM,QAASyD,EACTxD,WAAY,SAAC2N,EAAmB1Q,GAAQ,OAAK0Q,GAAqB1Q,CAAQ,EAC1EgD,KAAM,CAAC,CAAC,IAAI2N,WAAY,IAAIC,SAAOhH,IAAsBQ,MAv2B2B5H,wEAAEqO,mBAAA1R,GAAA2R,MAAA,EAAAC,KAAA,EAAAC,OAAA,iGAAAC,SAAA,SAAAd,EAAAC,GAAA,EAAAD,IAAF3N,yDAAE,aAAFA,yBAAE,GAAFA,iDAAE,YAy2BwmB,EAAA2N,IAz2B1mB3N,sBAAE,GAAFA,wBAAE,QAAA4N,EAAAjF,mBAAF3I,CAy2B4jB,SAAA4N,EAAAhF,qBAAA,EAAA8F,OAAA,yrDAAAC,cAAA,EAAAC,gBAAA,IA7W1pBhH,CAAwB,IAoZ9B,SAASiH,GAAUtH,EAAauH,EAAWC,GAEvC,IADWA,EACHlI,sBACJ,OAAO,EAEX,IAAMmI,EAJKD,EAIKlI,wBAChB,MAAoB,eAAhBU,EACqB,UAAduH,EAAwBE,EAAKrK,KAAOqK,EAAKpK,MAE/B,UAAdkK,EAAwBE,EAAKlK,IAAMkK,EAAKnK,MACnD,CACA,IAIMoK,GAAe,eAAfA,EAAe,WA6CjB,SAAAA,EAEAC,EAEAC,EAEAC,EAEAC,EAEAjS,EAAW8G,GAAQ,IAAAoL,EAAAhe,MAAAD,OAAAC,KAAA2d,GACf3d,KAAK4d,kBAAoBA,EACzB5d,KAAK6d,UAAYA,EACjB7d,KAAK8d,SAAWA,EAChB9d,KAAK+d,cAAgBA,EACrB/d,KAAK8L,UAAYA,EAEjB9L,KAAKie,WAAa,IAAIpc,IAEtB7B,KAAKke,mBAAqB,IAAIrc,IAE9B7B,KAAK8Y,WAAa9Y,KAAKke,mBAAmB3b,QAE1CgW,KAAU,MChqCX,SAAS4F,IACZ,SAAOrZ,KAAQ,SAACC,EAAQ/D,GACpB,IAAIod,EACAC,GAAU,EACdtZ,EAAOS,aAAUC,KAAyBzE,EAAY,SAACR,GACnD,IAAM8d,EAAIF,EACVA,EAAO5d,EACP6d,GAAWrd,EAAWQ,KAAK,CAAC8c,EAAG9d,IAC/B6d,GAAU,CACd,GACJ,EACJ,CDupCQF,IAAQ,EAIRI,KAAU,SAAA9b,GAAA,IAAAc,KAAAC,KAAAf,EAAA,GAAW,OAAMub,EAAKQ,kBAAhBjb,EAAA,GAAKA,EAAA,GAAuC,MAE5D6E,KAAY,IAEZpI,KAAKye,QAAU,KAEfze,KAAK0e,cAAe,EACpB1e,KAAK+S,WAAa,IAAIlR,IACtB7B,KAAK8Y,WAAWtT,UAAU,SAAAuT,GACtBiF,EAAKW,MAAQ5F,EACbiF,EAAKY,uBACT,GACA5e,KAAK8L,UAAUqL,oBAAoB5U,QAAK0Q,KAAUjT,KAAK+S,aAAavN,UAAU,SAAA4T,GAC1E4E,EAAKzG,eAAiB6B,EAClB4E,EAAKC,WAAWY,UAAUpf,QAC1BmT,EAAOsE,IAAI,kBAAM8G,EAAKC,WAAWzc,KAAKwc,EAAKzG,eAAe,GAE9DyG,EAAKY,uBACT,GACA5e,KAAK8L,UAAUwM,OAAOtY,KAC1B,CACAM,cAAAqd,EAAA,EAAApd,IAAA,kBAAA4N,eA5FI,OAAOnO,KAAK8e,gBAChB,EAAC1Q,IACD,SAAoB5N,GAChBR,KAAK8e,iBAAmBte,KACpBue,gBAAave,GACbR,KAAKke,mBAAmB1c,KAAKhB,GAI7BR,KAAKke,mBAAmB1c,KAAK,IAAIwd,qBAAgBnU,KAAarK,GAASA,EAAQ2D,MAAMK,KAAKhE,GAAS,KAE3G,GACA,CAAAD,IAAA,uBAAA4N,IAIA,WACI,OAAOnO,KAAKif,qBAChB,EAAC7Q,IACD,SAAyBnD,GAAI,IAAAiU,EAAAlf,KACzBA,KAAK0e,cAAe,EACpB1e,KAAKif,sBAAwBhU,EACvB,SAACzE,EAAO2Y,GAAI,OAAKlU,EAAGzE,GAAS0Y,EAAK3H,eAAiB2H,EAAK3H,eAAe3K,MAAQ,GAAIuS,EAAK,OACxFzf,CACV,GACA,CAAAa,IAAA,wBAAA6N,IACA,SAA0B5N,GAClBA,IACAR,KAAK0e,cAAe,EACpB1e,KAAK6d,UAAYrd,EAEzB,GACA,CAAAD,IAAA,iCAAA4N,IAIA,WACI,OAAOnO,KAAK+d,cAAcqB,aAC9B,EAAChR,IACD,SAAmC+K,GAC/BnZ,KAAK+d,cAAcqB,iBAAgB/Q,wBAAqB8K,EAC5D,GAAC,CAAA5Y,IAAA,mBAAAC,MAwDD,SAAiB4Y,EAAOnD,GACpB,GAAImD,EAAMxM,OAASwM,EAAMvM,IACrB,OAAO,EAeX,QAHIwS,EACAC,EANEC,EAAqBnG,EAAMxM,MAAQ5M,KAAKuX,eAAe3K,MAEvD4S,EAAWpG,EAAMvM,IAAMuM,EAAMxM,MAM1BtL,EAAI,EAAGA,EAAIke,EAAUle,IAAK,CAC/B,IAAMme,EAAOzf,KAAK4d,kBAAkBzP,IAAI7M,EAAIie,GAC5C,GAAIE,GAAQA,EAAKC,UAAUjgB,OAAQ,CAC/B4f,EAAYC,EAAWG,EAAKC,UAAU,GACtC,OAIR,QAASpe,EAAIke,EAAW,EAAGle,GAAI,EAAIA,IAAK,CACpC,IAAMme,EAAOzf,KAAK4d,kBAAkBzP,IAAI7M,EAAIie,GAC5C,GAAIE,GAAQA,EAAKC,UAAUjgB,OAAQ,CAC/B6f,EAAWG,EAAKC,UAAUD,EAAKC,UAAUjgB,OAAS,GAClD,OAGR,OAAO4f,GAAaC,EACd/B,GAAUtH,EAAa,MAAOqJ,GAAY/B,GAAUtH,EAAa,QAASoJ,GAC1E,CACV,GAAC,CAAA9e,IAAA,YAAAC,MACD,WACI,GAAIR,KAAKye,SAAWze,KAAK0e,aAAc,CAInC,IAAMiB,EAAU3f,KAAKye,QAAQmB,KAAK5f,KAAK6f,gBAClCF,EAID3f,KAAK8f,cAAcH,GAHnB3f,KAAK+f,iBAKT/f,KAAK0e,cAAe,EAE5B,GAAC,CAAAne,IAAA,cAAAC,MACD,WACIR,KAAK8L,UAAU4M,SACf1Y,KAAKke,mBAAmB1c,UAAK9B,GAC7BM,KAAKke,mBAAmB5Y,WACxBtF,KAAKie,WAAW3Y,WAChBtF,KAAK+S,WAAWvR,OAChBxB,KAAK+S,WAAWzN,WAChBtF,KAAK+d,cAAcrF,QACvB,GACA,CAAAnY,IAAA,wBAAAC,MACA,WAAwB,IAAAwf,EAAAhgB,KACfA,KAAKuX,iBAGVvX,KAAK6f,eAAiB7f,KAAK2e,MAAMtd,MAAMrB,KAAKuX,eAAe3K,MAAO5M,KAAKuX,eAAe1K,KACjF7M,KAAKye,UAGNze,KAAKye,QAAUze,KAAK8d,SAASmC,KAAKjgB,KAAK6f,gBAAgBK,OAAO,SAAC1Z,EAAO2Y,GAClE,OAAOa,EAAKG,qBAAuBH,EAAKG,qBAAqB3Z,EAAO2Y,GAAQA,CAChF,IAEJnf,KAAK0e,cAAe,EACxB,GACA,CAAAne,IAAA,oBAAAC,MACA,SAAkB4f,EAAOC,GACrB,OAAID,GACAA,EAAME,WAAWtgB,MAErBA,KAAK0e,cAAe,EACb2B,EAAQA,EAAME,QAAQvgB,OAAI,EAAIqE,OACzC,GACA,CAAA9D,IAAA,iBAAAC,MACA,WAGI,QAFMggB,EAAQxgB,KAAK2e,MAAMlf,OACrB6B,EAAItB,KAAK4d,kBAAkBne,OACxB6B,KAAK,CACR,IAAMme,EAAOzf,KAAK4d,kBAAkBzP,IAAI7M,GACxCme,EAAKgB,QAAQja,MAAQxG,KAAKuX,eAAe3K,MAAQtL,EACjDme,EAAKgB,QAAQD,MAAQA,EACrBxgB,KAAK0gB,iCAAiCjB,EAAKgB,SAC3ChB,EAAKkB,eAAa,CAE1B,GACA,CAAApgB,IAAA,gBAAAC,MACA,SAAcmf,GAAS,IAAAiB,EAAA5gB,KACnBA,KAAK+d,cAAc8C,aAAalB,EAAS3f,KAAK4d,kBAAmB,SAACkD,EAAQC,EAAwBC,GAAY,OAAKJ,EAAKK,qBAAqBH,EAAQE,EAAa,EAAE,SAAAF,GAAM,OAAIA,EAAO3B,IAAI,GAEzLQ,EAAQuB,sBAAsB,SAACJ,GACdF,EAAKhD,kBAAkBzP,IAAI2S,EAAOE,cAC1CP,QAAQU,UAAYL,EAAO3B,IACpC,GAIA,QAFMqB,EAAQxgB,KAAK2e,MAAMlf,OACrB6B,EAAItB,KAAK4d,kBAAkBne,OACxB6B,KAAK,CACR,IAAMme,EAAOzf,KAAK4d,kBAAkBzP,IAAI7M,GACxCme,EAAKgB,QAAQja,MAAQxG,KAAKuX,eAAe3K,MAAQtL,EACjDme,EAAKgB,QAAQD,MAAQA,EACrBxgB,KAAK0gB,iCAAiCjB,EAAKgB,QAAO,CAE1D,GACA,CAAAlgB,IAAA,mCAAAC,MACA,SAAiCigB,GAC7BA,EAAQxa,MAA0B,IAAlBwa,EAAQja,MACxBia,EAAQ7e,KAAO6e,EAAQja,QAAUia,EAAQD,MAAQ,EACjDC,EAAQW,KAAOX,EAAQja,MAAQ,GAAM,EACrCia,EAAQY,KAAOZ,EAAQW,IAC3B,GAAC,CAAA7gB,IAAA,uBAAAC,MACD,SAAqBsgB,EAAQta,GAKzB,MAAO,CACH8a,YAAathB,KAAK6d,UAClB4C,QAAS,CACLU,UAAWL,EAAO3B,KAGlBoC,gBAAiBvhB,KAAK8e,iBACtBtY,OAAO,EACPga,OAAO,EACPva,OAAO,EACPrE,MAAM,EACNyf,KAAK,EACLD,MAAM,GAEV5a,QAER,KAACmX,CAAA,CAjPgB,GAAfA,SAkPYpP,UAAI,SAAAC,GAAA,WAAAA,GAAwFmP,GAjpCVjP,8BAipC2CA,oBAjpC3CA,8BAipC2EA,eAjpC3EA,8BAipCsGA,mBAjpCtGA,8BAipCqI8S,2BAjpCrI9S,8BAipCyK4H,GAAwB,GAjpCjM5H,8BAipC8NA,UAAS,EAlPrUiP,EAmPYlP,UAlpCkFC,8BAAE,CAAAC,KAkpCJgP,EAAe/O,UAAA,+CAAAC,OAAA,CAAA0S,gBAAA,kBAAApB,qBAAA,uBAAAsB,sBAAA,wBAAAC,+BAAA,kCAAA5S,YAAA,EAAAC,SAAA,CAlpCbL,+BAkpC4S,CAAC,CAAEM,QAASwS,0BAAyBG,SAAUC,qCAnPzbjE,CAAe,IA8QfkE,GAA2B,eAA3BA,EAA2B,SAAAC,IAAA3iB,OAAA0iB,EAAAC,GAAA,IAAAC,KAAA1iB,KAAAwiB,GAC7B,SAAAA,EAAYnP,EAAYC,EAAkBC,EAAQC,GAAK9S,cAAAC,KAAA6hB,GAAAE,EAAA9hB,KAAAD,KAC7C0S,EAAYC,EAAkBC,EAAQC,EAChD,CAACvS,cAAAuhB,EAAA,EAAAthB,IAAA,4CAAAC,MACD,SAA0CgE,GACtC,OAAQxE,KAAK6R,gBAAgBC,cAAcyD,wBAAwB/Q,GAC/DxE,KAAKkN,oBAAoB1I,EACjC,KAACqd,CAAA,CAP4B,CAAS9L,GAApC8L,SAQYtT,UAAI,SAAAC,GAAA,WAAAA,GAAwFqT,GArrCVnT,8BAqrCuDA,cArrCvDA,8BAqrCiFW,GArrCjFX,8BAqrC8GA,UArrC9GA,8BAqrCoI2F,iBAAiB,KARnPwN,EASYpT,UAtrCkFC,8BAAE,CAAAC,KAsrCJkT,EAA2BjT,UAAA,uCAAA4N,UAAA,6BAAA1N,YAAA,EAAAC,SAAA,CAtrCzBL,+BAsrCwJ,CAAC,CAAEM,QAAS8G,EAAoBkM,YAAaH,KAtrCrMnT,0CA6qC9FmT,CAA2B,IA4B3BI,GAA0B,eAA1BA,EAA0B,SAAAC,IAAA/iB,OAAA8iB,EAAAC,GAAA,IAAAC,KAAA9iB,KAAA4iB,GAC5B,SAAAA,EAAYtP,EAAkBC,EAAQC,GAAK,IAAAuP,EAAAriB,cAAAC,KAAAiiB,IACvCG,EAAAD,EAAAliB,KAAAD,KAAM,IAAIqiB,aAAW7S,SAAS6F,iBAAkB1C,EAAkBC,EAAQC,IACrEG,iBAAmB,IAAIhP,IAAW,SAACuM,GAAQ,OAAK6R,EAAKxP,OAAOX,kBAAkB,oBAAMhQ,KAAUuN,SAAU,UAAUjN,QAAK0Q,KAAUmP,EAAKrP,aAAavN,UAAU+K,EAAS,EAAC,GAAE6R,CAClL,CAAC9hB,cAAA2hB,EAAA,EAAA1hB,IAAA,4CAAAC,MACD,SAA0CgE,GACtC,OAAOxE,KAAK6R,gBAAgBC,cAAcyD,wBAAwB/Q,EACtE,KAACyd,CAAA,CAP2B,CAASlM,GAAnCkM,SAQY1T,UAAI,SAAAC,GAAA,WAAAA,GAAwFyT,GAjtCVvT,8BAitCsDW,GAjtCtDX,8BAitCmFA,UAjtCnFA,8BAitCyG2F,iBAAiB,KARxN4N,EASYxT,UAltCkFC,8BAAE,CAAAC,KAktCJsT,EAA0BrT,UAAA,oDAAAE,YAAA,EAAAC,SAAA,CAltCxBL,+BAktCgH,CAAC,CAAEM,QAAS8G,EAAoBkM,YAAaC,KAltC7JvT,0CAysC9FuT,CAA0B,IAsB1BK,GAAmB,eAAnBA,GAAmBhiB,OAAA,SAAAgiB,KAAAviB,OAAAC,KAAAsiB,EAAA,GAAnBA,SACY/T,UAAI,SAAAC,GAAA,WAAAA,GAAwF8T,EAAmB,EAD3HA,EAEYC,UAjuCkF7T,6BAAE,CAAAC,KAiuCS2T,IAFzGA,EAGYE,UAluCkF9T,6BAAE,IA+tChG4T,CAAmB,IAenBG,GAAe,eAAfA,GAAeniB,OAAA,SAAAmiB,KAAA1iB,OAAAC,KAAAyiB,EAAA,GAAfA,SACYlU,UAAI,SAAAC,GAAA,WAAAA,GAAwFiU,EAAe,EADvHA,EAEYF,UAhvCkF7T,6BAAE,CAAAC,KAgvCS8T,IAFzGA,EAWYD,UAzvCkF9T,6BAAE,CAAAgU,QAAA,CAyvCoCC,aAC9HL,GAAqBK,aAAYL,MAZvCG,CAAe","names":["ReplaySubject","_Subject","_inherits","_super","_createSuper","_this","_bufferSize","arguments","length","undefined","Infinity","_windowTime","_timestampProvider","dateTimestampProvider","_classCallCheck","this","call","_buffer","_infiniteTimeWindow","Math","max","_createClass","key","value","isStopped","push","now","_trimBuffer","_get","_getPrototypeOf","prototype","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","closed","next","_checkFinalizedStatuses","adjustedBufferSize","splice","last","Subject","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","pipe","mapOneOrManyArgs","_ref","isEventTarget","addEventListener","removeEventListener","map","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","_ref2","_slicedToArray","add","remove","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","_len","args","Array","_key","of","scheduler","popScheduler","from","auditTime","duration","asyncScheduler","audit","durationSelector","operate","source","hasValue","lastValue","durationSubscriber","isComplete","endDuration","unsubscribe","complete","cleanupDuration","subscribe","createOperatorSubscriber","timer","distinctUntilChanged","comparator","keySelector","identity","defaultCompare","previousKey","first","currentKey","a","b","filter","predicate","thisArg","index","share","_options$connector","connector","_options$resetOnError","resetOnError","_options$resetOnCompl","resetOnComplete","_options$resetOnRefCo","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","refCount","hasCompleted","hasErrored","cancelReset","reset","resetAndUnsubscribe","conn","dest","handleReset","SafeSubscriber","error","err","onSubscriber","apply","shareReplay","configOrBufferSize","windowTime","bufferSize","_configOrBufferSize$b","_configOrBufferSize$w","_configOrBufferSize$r","resolved","nextHandle","activeHandles","findAndClearHandle","handle","setImmediate","cb","Promise","resolve","then","clearImmediate","immediateProvider","delegate","AsapAction","_AsyncAction","work","id","delay","actions","_scheduled","flush","bind","_a","AsyncAction","asapScheduler","_AsyncScheduler","AsapScheduler","action","_active","flushId","shift","execute","state","AsyncScheduler","isObservable","obj","lift","isArray","fn","callOrApply","_toConsumableArray","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","ceil","newVisibleIndex","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","get","set","coerceNumberProperty","updateItemAndBufferSize","ɵfac","t","ɵdir","i0","type","selectors","inputs","standalone","features","provide","useFactory","deps","forwardRef","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","has","elementScrolled","scrollableReference","delete","_this2","auditTimeInMs","isBrowser","observer","_addGlobalListener","_removeGlobalListener","_this3","forEach","_","container","deregister","elementOrElementRef","ancestors","getAncestorScrollContainers","scrolled","indexOf","_this4","scrollingContainers","_subscription","_scrollableContainsElement","defaultView","window","element","coerceElement","scrollableElement","getElementRef","nativeElement","parentElement","_this5","runOutsideAngular","_getWindow","i1","DOCUMENT","ɵprov","token","factory","providedIn","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_this6","_destroyed","_elementScrolled","takeUntil","register","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","scrollWidth","clientWidth","_applyScrollToOptions","supportsScrollBehavior","scrollTo","scrollTop","scrollLeft","LEFT","RIGHT","i2","DEFAULT_RESIZE_TIME","ViewportRuler","_this7","_change","_changeListener","event","change","_viewportSize","_updateViewportSize","output","width","height","scrollPosition","getViewportScrollPosition","_this$getViewportSize","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","_CdkScrollable","orientation","viewportEl","SCROLL_SCHEDULER","requestAnimationFrame","animationFrameScheduler","CdkVirtualScrollViewport","_CdkVirtualScrollable","_super2","_changeDetectorRef","viewportRuler","_this8","inject","Platform","_detachedSubject","_renderedRangeSubject","_orientation","_appendOnly","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","Subscription","checkViewportSize","classList","_assertThisInitialized","_calculateSpacerSize","coerceBooleanProperty","_this9","_measureViewportSize","attach","startWith","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_this10","_forOf","dataStream","data","newLength","onDataLengthChanged","_doChangeDetection","size","range","_this11","rangesEqual","r1","r2","appendOnly","onContentRendered","offset","_this12","to","isHorizontal","axis","axisDirection","transform","concat","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","_this13","_from","measureViewportOffset","_this$dir","fromRect","scrollerClientRect","measureBoundingClientRectWithScrollOffset","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","measureViewportSize","runAfter","_this14","_this15","style","markForCheck","runAfterChangeDetection","_step","_iterator","_createForOfIteratorHelper","s","n","done","e","f","ɵcmp","viewQuery","rf","ctx","_t","hostAttrs","hostVars","hostBindings","outputs","virtualScrollable","Optional","Inject","ngContentSelectors","decls","vars","consts","template","styles","encapsulation","changeDetection","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","_this16","viewChange","_dataSourceChanges","pairwise","prev","hasPrev","p","switchMap","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","observers","_cdkVirtualForOf","isDataSource","ArrayDataSource","_cdkVirtualForTrackBy","_this17","item","viewCacheSize","firstNode","lastNode","renderedStartIndex","rangeLen","view","rootNodes","changes","diff","_renderedItems","_applyChanges","_updateContext","_this18","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","_this19","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","even","odd","templateRef","cdkVirtualForOf","_VIEW_REPEATER_STRATEGY","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","useClass","_RecycleViewRepeaterStrategy","CdkVirtualScrollableElement","_CdkVirtualScrollable2","_super3","useExisting","CdkVirtualScrollableWindow","_CdkVirtualScrollable3","_super4","_this20","ElementRef","CdkScrollableModule","ɵmod","ɵinj","ScrollingModule","imports","BidiModule"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/observable/of.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/dist/esm/internal/operators/filter.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/util/isObservable.js","./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js"],"sourcesContent":["import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function of(...args) {\n    const scheduler = popScheduler(args);\n    return from(args, scheduler);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function distinctUntilChanged(comparator, keySelector = identity) {\n    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n    return operate((source, subscriber) => {\n        let previousKey;\n        let first = true;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const currentKey = keySelector(value);\n            if (first || !comparator(previousKey, currentKey)) {\n                first = false;\n                previousKey = currentKey;\n                subscriber.next(value);\n            }\n        }));\n    });\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return on(...args).subscribe(onSubscriber);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from './isFunction';\nexport function isObservable(obj) {\n    return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));\n}\n","import { map } from \"../operators/map\";\nconst { isArray } = Array;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn(...args) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(args => callOrApply(fn, args));\n}\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }]; }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }]; }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}